{
	"folders":
	[
		{
			"name": "Root",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"_traces",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "Maps",
			"path": "./_data/resources/map",
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"new_project.bat",
				"init_emsdk.bat",
				"init_msvc.bat",
				"pdxinfo",
				"build_config.h",
				"build_config2.h",
				"build_script.c",
				"PigCore.raddbg",
				"emscripten_hello_world.*",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
		{
			"name": "Tracy",
			"path": "core/third_party/tracy",
			"file_exclude_patterns": [
				"TracyClient.F90",
				"LICENSE",
			],
		},
		{
			"name": "hoxml",
			"path": "third_party/hoxml",
			"file_exclude_patterns": [
				"README.md",
				"LICENSE",
			],
		},
		{
			"name": "Protobuf-C",
			"path": "core/third_party/protobuf_c",
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BUILDING_AS_DLL",
			"BUILD_GAME_DLL",
			"BUILD_GAME_EXE",
			"BUILD_INTO_SINGLE_UNIT",
			"BUILD_PIGGEN_IF_NEEDED",
			"BUILD_PIG_CORE_LIB",
			"BUILD_PIG_CORE_LIB_IF_NEEDED",
			"BUILD_TRACY_DLL",
			"BUILD_WITH_PROTOBUF",
			"CHECK_RECENT_FILES_CHANGED_PERIOD",
			"CL_GENERATE_ASSEMB_LISTING",
			"COPY_TO_DATA_DIRECTORY",
			"CartoBorderBuilding",
			"CartoBorderCommercial",
			"CartoBorderDarkerBuilding",
			"CartoBorderParking",
			"CartoBorderPublicTransit",
			"CartoBorderReligious",
			"CartoBorderRetail",
			"CartoBorderRetailBuilding",
			"CartoBorderWater",
			"CartoFillBackground",
			"CartoFillBridge",
			"CartoFillBuilding",
			"CartoFillCemetery",
			"CartoFillCommercial",
			"CartoFillDarkerBuilding",
			"CartoFillForest",
			"CartoFillGrass",
			"CartoFillIndustrial",
			"CartoFillPark",
			"CartoFillParking",
			"CartoFillPlayground",
			"CartoFillPublicTransit",
			"CartoFillReligious",
			"CartoFillResidential",
			"CartoFillRetail",
			"CartoFillRetailBuilding",
			"CartoFillSchool",
			"CartoFillSports",
			"CartoFillWater",
			"CartoStrokeCycleway",
			"CartoStrokeHedge",
			"CartoStrokePowerline",
			"CartoStrokeRail",
			"CartoStrokeSecondary",
			"CartoStrokeTrack",
			"CartoStrokeTrunk",
			"CartoTextBlack",
			"CartoTextBlue",
			"CartoTextBrown",
			"CartoTextDarkBlue",
			"CartoTextGreen",
			"CartoTextGrey",
			"CartoTextMagenta",
			"CartoTextOrange",
			"CartoTextPurple",
			"CartoTextRed",
			"CartoTextTan",
			"DEFAULT_MAP_FONT_SIZE",
			"DEFAULT_WINDOW_SIZE",
			"DataStreamType_Buffer",
			"DataStreamType_Count",
			"DataStreamType_File",
			"DataStreamType_None",
			"DataStreamType_Socket",
			"FNV_HASH_BASE_U32",
			"FNV_HASH_BASE_U64",
			"FNV_HASH_PRIME_U32",
			"FNV_HASH_PRIME_U64",
			"FontCharRange_ASCII",
			"FontCharRange_Cyrillic",
			"FontCharRange_Hiragana",
			"FontCharRange_Katakana",
			"FontCharRange_LatinExt",
			"FontCharRange_LatinSupplementAccent",
			"HTTP_DEFAULT_USER_AGENT_STR",
			"HTTP_DEFAULT_USER_AGENT_WIDE_STR",
			"HTTP_MAX_RESPONSE_SIZE",
			"Line2DR64",
			"MAP_BACKGROUND_TEXTURE_PATH",
			"MAP_FONT_NAME",
			"MAP_FONT_STYLE",
			"MAP_MAX_ZOOM",
			"MAP_TILE_IMAGE_SIZE",
			"MAX_LOADED_MAP_TILES",
			"MAX_MAP_TILE_DEPTH",
			"MEOW_HASH_AVAILABLE",
			"MERCATOR_LONGITUDE_RANGE",
			"MERCATOR_MAP_ASPECT_RATIO",
			"MIN_WINDOW_SIZE",
			"MapProjection_Count",
			"MapProjection_Mercator",
			"MapProjection_None",
			"OSM_TILE_API_URL_FORMAT_STR",
			"OSM_TILE_API_USER_AGENT",
			"OsFileWatchChange_Count",
			"OsFileWatchChange_Created",
			"OsFileWatchChange_Deleted",
			"OsFileWatchChange_Modified",
			"OsFileWatchChange_None",
			"OsmPrimitiveType_Count",
			"OsmPrimitiveType_Node",
			"OsmPrimitiveType_None",
			"OsmPrimitiveType_Way",
			"OsmRelation",
			"OsmRelationMemberRole_Access",
			"OsmRelationMemberRole_AdminCentre",
			"OsmRelationMemberRole_Backward",
			"OsmRelationMemberRole_BackwardStop",
			"OsmRelationMemberRole_Both",
			"OsmRelationMemberRole_Building",
			"OsmRelationMemberRole_BusStop",
			"OsmRelationMemberRole_Connector",
			"OsmRelationMemberRole_Count",
			"OsmRelationMemberRole_Defunct",
			"OsmRelationMemberRole_Device",
			"OsmRelationMemberRole_East",
			"OsmRelationMemberRole_Entrance",
			"OsmRelationMemberRole_Forward",
			"OsmRelationMemberRole_ForwardStop",
			"OsmRelationMemberRole_From",
			"OsmRelationMemberRole_Inner",
			"OsmRelationMemberRole_Label",
			"OsmRelationMemberRole_None",
			"OsmRelationMemberRole_North",
			"OsmRelationMemberRole_Outer",
			"OsmRelationMemberRole_Outline",
			"OsmRelationMemberRole_Part",
			"OsmRelationMemberRole_Platform",
			"OsmRelationMemberRole_PlatformArea",
			"OsmRelationMemberRole_PlatformEntryOnly",
			"OsmRelationMemberRole_PlatformExitOnly",
			"OsmRelationMemberRole_Roof",
			"OsmRelationMemberRole_South",
			"OsmRelationMemberRole_Spring",
			"OsmRelationMemberRole_Station",
			"OsmRelationMemberRole_Stop",
			"OsmRelationMemberRole_StopEntryOnly",
			"OsmRelationMemberRole_Street",
			"OsmRelationMemberRole_To",
			"OsmRelationMemberRole_Via",
			"OsmRelationMemberRole_West",
			"OsmRelationMemberType_Count",
			"OsmRelationMemberType_Node",
			"OsmRelationMemberType_None",
			"OsmRelationMemberType_Relation",
			"OsmRelationMemberType_Way",
			"OsmRenderLayer_Bottom",
			"OsmRenderLayer_Count",
			"OsmRenderLayer_Middle",
			"OsmRenderLayer_None",
			"OsmRenderLayer_Selection",
			"OsmRenderLayer_Top",
			"PIG_CORE_BUILDING_AS_DLL",
			"PIG_CORE_IMPLEMENTATION",
			"PIG_CORE_INLINE",
			"PROFILING_ENABLED",
			"RECENT_FILES_MAX_LENGTH",
			"RECENT_FILES_RELOAD_DELAY",
			"RECENT_FILES_SAVE_FILEPATH",
			"Result_AttributeNotFound",
			"Result_DecompressError",
			"Result_Duplicate",
			"Result_ElementNotFound",
			"Result_EndOfBuffer",
			"Result_EndOfFile",
			"Result_InvalidAttributeValue",
			"Result_InvalidID",
			"Result_InvalidRole",
			"Result_Mismatch",
			"Result_MissingData",
			"Result_MissingHeader",
			"Result_StackOverflow",
			"Result_UnexpectedEndElement",
			"Result_UnexpectedEof",
			"Result_UnsupportedCompression",
			"Result_UnsupportedFileFormat",
			"Result_ValueTooHigh",
			"Result_ValueTooLow",
			"Result_WrongEndElementType",
			"Result_WrongInternalFormat",
			"SPARSE_SET_MIN_SIZE",
			"SparseSetV3i_EmptyV3i",
			"SparseSetV3i_EmptyValue",
			"SparseSetV3i_HeaderSize",
			"TEXTBOX_INNER_PADDING_X",
			"TEXTBOX_INNER_PADDING_Y",
			"TILES_FOLDERPATH",
			"TwoPassStr8_Empty",
			"TwoPassStr8_Empty_Const",
			"UNICODE_LATIN_EXT_A_COUNT",
			"UNICODE_LATIN_EXT_A_END",
			"UNICODE_LATIN_EXT_A_START",
			"UNICODE_PRINTABLE_ASCII_COUNT",
			"UNICODE_PRINTABLE_ASCII_END",
			"UNICODE_PRINTABLE_ASCII_START",
			"WAY_SIMPLIFYING_EPSILON_PX",
		],
		"custom_functions":
		[
			"#define AddClipRec(clipRec)",
			"#define AllocArray(type, arenaPntr, count)",
			"#define AllocArrayUnaligned(type, arenaPntr, count)",
			"#define AllocType(type, arenaPntr)",
			"#define AllocTypeUnaligned(type, arenaPntr)",
			"#define BeginFrame(swapchain, screenSize, clearColor, clearDepth)",
			"#define Billion(value)",
			"#define Billionth(value)",
			"#define BinReadI16(slice, readIndexPntr, errorCode)",
			"#define BinReadI32(slice, readIndexPntr, errorCode)",
			"#define BinReadI64(slice, readIndexPntr, errorCode)",
			"#define BinReadI8(slice, readIndexPntr, errorCode)",
			"#define BinReadR32(slice, readIndexPntr, errorCode)",
			"#define BinReadR64(slice, readIndexPntr, errorCode)",
			"#define BinReadU16(slice, readIndexPntr, errorCode)",
			"#define BinReadU32(slice, readIndexPntr, errorCode)",
			"#define BinReadU64(slice, readIndexPntr, errorCode)",
			"#define BinReadU8(slice, readIndexPntr, errorCode)",
			"#define BinStreamReadI16(streamPntr, arenaPntr, errorCode)",
			"#define BinStreamReadI32(streamPntr, arenaPntr, errorCode)",
			"#define BinStreamReadI64(streamPntr, arenaPntr, errorCode)",
			"#define BinStreamReadI8(streamPntr, arenaPntr, errorCode)",
			"#define BinStreamReadR32(streamPntr, arenaPntr, errorCode)",
			"#define BinStreamReadR64(streamPntr, arenaPntr, errorCode)",
			"#define BinStreamReadU16(streamPntr, arenaPntr, errorCode)",
			"#define BinStreamReadU32(streamPntr, arenaPntr, errorCode)",
			"#define BinStreamReadU64(streamPntr, arenaPntr, errorCode)",
			"#define BinStreamReadU8(streamPntr, arenaPntr, errorCode)",
			"#define BinarySearchFlatOnFloatMember(type, memberName, arrayPntr, numElements, elementSize, targetPntr)",
			"#define BinarySearchFlatOnIntMember(type, memberName, arrayPntr, numElements, elementSize, targetPntr)",
			"#define BinarySearchFlatOnUintMember(type, memberName, arrayPntr, numElements, elementSize, targetPntr)",
			"#define BinarySearchVarArrayFloatElem(type, arrayPntr, targetPntr)",
			"#define BinarySearchVarArrayFloatMember(type, memberName, arrayPntr, targetPntr)",
			"#define BinarySearchVarArrayIntElem(type, arrayPntr, targetPntr)",
			"#define BinarySearchVarArrayIntMember(type, memberName, arrayPntr, targetPntr)",
			"#define BinarySearchVarArrayUintElem(type, arrayPntr, targetPntr)",
			"#define BinarySearchVarArrayUintMember(type, memberName, arrayPntr, targetPntr)",
			"#define BindFont(fontPntr)",
			"#define BindFontAtSize(fontPntr, fontSize)",
			"#define BindFontEx(fontPntr, fontSize, fontStyleFlags)",
			"#define BindShader(shaderPntr)",
			"#define BindTexture(texturePntr)",
			"#define BindTextureAtIndex(texturePntr, textureIndex)",
			"#define BindVertBuffer(bufferPntr)",
			"#define BktArrayAdd(type, arrayPntr)",
			"#define BktArrayAddArray(type, destArrayPntr, srcArrayPntr)",
			"#define BktArrayAddMulti(type, arrayPntr, numItems)",
			"#define BktArrayAddSomewhere(type, arrayPntr)",
			"#define BktArrayAddValue(type, arrayPntr, value)",
			"#define BktArrayAddValueSomewhere(type, arrayPntr, value)",
			"#define BktArrayAddValues(type, arrayPntr, numValues, valuesPntr)",
			"#define BktArrayAllocSize(arrayPntr, allocLength)",
			"#define BktArrayBktGetItemPntr(arrayPntr, bucketPntr, index)",
			"#define BktArrayContains(type, arrayPntr, itemInQuestion)",
			"#define BktArrayGet(type, arrayPntr, index)",
			"#define BktArrayGetHard(type, arrayPntr, index)",
			"#define BktArrayGetIndexOf(type, arrayPntr, itemInQuestion)",
			"#define BktArrayGetSoft(type, arrayPntr, index)",
			"#define BktArrayInsert(type, arrayPntr, index)",
			"#define BktArrayInsertValue(type, arrayPntr, index, value)",
			"#define BktArrayPush(type, arrayPntr, value)",
			"#define BktArrayRemove(type, arrayPntr, itemToRemovePntr)",
			"#define BktArrayRemoveAt(type, arrayPntr, index)",
			"#define CantorPair(x, y)",
			"#define CantorPairV(vector)",
			"#define CantorTriplet(x, y, z)",
			"#define CantorTripletV(vector)",
			"#define Centi(value)",
			"#define CreateTwoPassInnerArena(twoPassStrPntr, arenaPntrName)",
			"#define Deca(value)",
			"#define Deci(value)",
			"#define DisableClipRec()",
			"#define DoUiResizableSplitInterleaved(sectionVarName, context, splitPntr)",
			"#define DoUiResizableSplitSection(sectionVarName, enumValue)",
			"#define DrawCircle(circle, color)",
			"#define DrawCirclePiece(circle, angleMin, angleMax, color)",
			"#define DrawLine(startPos, endPos, thickness, color)",
			"#define DrawObb2(boundingBox, color)",
			"#define DrawRectangle(rectangle, color)",
			"#define DrawRectangleOutline(rectangle, borderThickness, color)",
			"#define DrawRectangleOutlineEx(rectangle, borderThickness, color, outside)",
			"#define DrawRectangleOutlineSides(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color)",
			"#define DrawRectangleOutlineSidesEx(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, outside)",
			"#define DrawRing(circle, thickness, color)",
			"#define DrawRingPiece(circle, thickness, angleMin, angleMax, color)",
			"#define DrawRoundedRectangle(rectangle, radius, color)",
			"#define DrawRoundedRectangleEx(rectangle, radiusTL, radiusTR, radiusBR, radiusBL, color)",
			"#define DrawRoundedRectangleOutline(rectangle, thickness, radius, color)",
			"#define DrawRoundedRectangleOutlineEx(rectangle, thickness, radiusTL, radiusTR, radiusBR, radiusBL, color, outside)",
			"#define DrawText(text, position, color)",
			"#define DrawTexturedCircle(circle, color, texture)",
			"#define DrawTexturedCircleEx(circle, color, texture, sourceRec)",
			"#define DrawTexturedCirclePiece(circle, angleMin, angleMax, color, texture)",
			"#define DrawTexturedCirclePieceEx(circle, angleMin, angleMax, color, texture, sourceRec)",
			"#define DrawTexturedObb2(boundingBox, color, texture)",
			"#define DrawTexturedObb2Ex(boundingBox, color, texture, sourceRec)",
			"#define DrawTexturedRectangle(rectangle, color, texture)",
			"#define DrawTexturedRectangleEx(rectangle, color, texture, sourceRec)",
			"#define DrawTexturedRectangleOutline(rectangle, borderThickness, color, texture)",
			"#define DrawTexturedRectangleOutlineEx(rectangle, borderThickness, color, outside, texture, sourceRec)",
			"#define DrawTexturedRectangleOutlineSides(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, texture)",
			"#define DrawTexturedRectangleOutlineSidesEx(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, outside, texture, sourceRec)",
			"#define DrawTexturedRing(circle, thickness, color, texture)",
			"#define DrawTexturedRingEx(circle, thickness, color, texture, sourceRec)",
			"#define DrawTexturedRingPiece(circle, thickness, angleMin, angleMax, color, texture)",
			"#define DrawTexturedRingPieceEx(circle, thickness, angleMin, angleMax, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangle(rectangle, radius, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleEx(rectangle, radiusTL, radiusTR, radiusBR, radiusBL, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleOutline(rectangle, thickness, radius, color, outside, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleOutlineEx(rectangle, thickness, radiusTL, radiusTR, radiusBR, radiusBL, color, outside, texture, sourceRec)",
			"#define DrawVertices()",
			"#define DrawVerticesEx(startVertexOrIndex, numVerticesOrIndices)",
			"#define EndFrame()",
			"#define FlushBindings()",
			"#define FlushPipelineGen()",
			"#define FnvHashV3(x, y, z)",
			"#define FreeArray(type, arenaPntr, count, allocPntr)",
			"#define FreeType(type, arenaPntr, allocPntr)",
			"#define GetPbfString(stringTablePntr, stringId)",
			"#define Giga(value)",
			"#define Hecto(value)",
			"#define Hundred(value)",
			"#define Hundredth(value)",
			"#define INFO_PANEL_TEXT(idNt, idIndex, text, color)",
			"#define InitBktArray(type, arrayPntr, arenaPntr, defaultBucketSize)",
			"#define InitBktArrayWithInitial(type, arrayPntr, arenaPntr, defaultBucketSize, initialCountNeeded)",
			"#define InitSparseSetV3i(type, setPntr, arenaPntr)",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define IsBktArraySorted(type, arrayPntr, compareFunc, contextPntr)",
			"#define IsBktArraySortedFloatElem(type, arrayPntr)",
			"#define IsBktArraySortedFloatMember(type, memberName, arrayPntr)",
			"#define IsBktArraySortedIntElem(type, arrayPntr)",
			"#define IsBktArraySortedIntMember(type, memberName, arrayPntr)",
			"#define IsBktArraySortedUintElem(type, arrayPntr)",
			"#define IsBktArraySortedUintMember(type, memberName, arrayPntr)",
			"#define IsPntrWithin(regionStart, regionSize, pntr)",
			"#define IsSizedPntrWithin(regionStart, regionSize, pntr, size)",
			"#define IsSortedFuncsOnFloatMember(type, memberName, sortApiPntr)",
			"#define IsSortedFuncsOnIntMember(type, memberName, sortApiPntr)",
			"#define IsSortedFuncsOnUintMember(type, memberName, sortApiPntr)",
			"#define IsVarArraySorted(type, arrayPntr, compareFunc, contextPntr)",
			"#define IsVarArraySortedFloatElem(type, arrayPntr)",
			"#define IsVarArraySortedFloatMember(type, memberName, arrayPntr)",
			"#define IsVarArraySortedIntElem(type, arrayPntr)",
			"#define IsVarArraySortedIntMember(type, memberName, arrayPntr)",
			"#define IsVarArraySortedUintElem(type, arrayPntr)",
			"#define IsVarArraySortedUintMember(type, memberName, arrayPntr)",
			"#define Kilo(value)",
			"#define Mega(value)",
			"#define Micro(value)",
			"#define Milli(value)",
			"#define Million(value)",
			"#define Millionth(value)",
			"#define Nano(value)",
			"#define NewPbBuffer_Const(bufferLength, bufferPntr)",
			"#define Pico(value)",
			"#define ProtobufPackInArena(lowercaseType, arenaPntr, structPntr)",
			"#define ProtobufUnpackInArena(type, lowercaseType, arenaPntr, packedSlice)",
			"#define QuickSortBktArray(type, arrayPntr, compareFunc, contextPntr)",
			"#define QuickSortBktArrayFloat(type, arrayPntr)",
			"#define QuickSortBktArrayFloatMember(type, memberName, arrayPntr)",
			"#define QuickSortBktArrayFloatMemberReversed(type, memberName, arrayPntr)",
			"#define QuickSortBktArrayFloatReversed(type, arrayPntr)",
			"#define QuickSortBktArrayIntElem(type, arrayPntr)",
			"#define QuickSortBktArrayIntElemReversed(type, arrayPntr)",
			"#define QuickSortBktArrayIntMember(type, memberName, arrayPntr)",
			"#define QuickSortBktArrayIntMemberReversed(type, memberName, arrayPntr)",
			"#define QuickSortBktArrayReversed(type, arrayPntr, compareFunc, contextPntr)",
			"#define QuickSortBktArrayUintElem(type, arrayPntr)",
			"#define QuickSortBktArrayUintElemReversed(type, arrayPntr)",
			"#define QuickSortBktArrayUintMember(type, memberName, arrayPntr)",
			"#define QuickSortBktArrayUintMemberReversed(type, memberName, arrayPntr)",
			"#define QuickSortFlatOnUintMember(type, memberName, arrayPntr, numElements, elementSize)",
			"#define QuickSortFuncsOnFloatMember(type, memberName, arrayPntr, numElements, elementSize)",
			"#define QuickSortFuncsOnFloatMemberReversed(type, memberName, arrayPntr, numElements, elementSize)",
			"#define QuickSortFuncsOnIntMember(type, memberName, arrayPntr, numElements, elementSize)",
			"#define QuickSortFuncsOnIntMemberReversed(type, memberName, arrayPntr, numElements, elementSize)",
			"#define QuickSortFuncsOnUintMember(type, memberName, arrayPntr, numElements, elementSize)",
			"#define QuickSortFuncsOnUintMemberReversed(type, memberName, arrayPntr, numElements, elementSize)",
			"#define QuickSortVarArray(type, arrayPntr, compareFunc, contextPntr)",
			"#define QuickSortVarArrayFloat(type, arrayPntr)",
			"#define QuickSortVarArrayFloatMember(type, memberName, arrayPntr)",
			"#define QuickSortVarArrayFloatMemberReversed(type, memberName, arrayPntr)",
			"#define QuickSortVarArrayFloatReversed(type, arrayPntr)",
			"#define QuickSortVarArrayIntElem(type, arrayPntr)",
			"#define QuickSortVarArrayIntElemReversed(type, arrayPntr)",
			"#define QuickSortVarArrayIntMember(type, memberName, arrayPntr)",
			"#define QuickSortVarArrayIntMemberReversed(type, memberName, arrayPntr)",
			"#define QuickSortVarArrayUintElem(type, arrayPntr)",
			"#define QuickSortVarArrayUintElemReversed(type, arrayPntr)",
			"#define QuickSortVarArrayUintMember(type, memberName, arrayPntr)",
			"#define QuickSortVarArrayUintMemberReversed(type, memberName, arrayPntr)",
			"#define SetClipRec(clipRec)",
			"#define SetColorWriteEnabled(colorWriteEnabled)",
			"#define SetCullingEnabled(cullingEnabled)",
			"#define SetDepth(depth)",
			"#define SetDepthTestEnabled(depthTestEnabled)",
			"#define SetDepthWriteEnabled(depthWriteEnabled)",
			"#define SetProjectionMat(matrix)",
			"#define SetSourceRec(rectangle)",
			"#define SetSourceRecRaw(rectangle)",
			"#define SetTintColor(color)",
			"#define SetTintColorRaw(colorVec)",
			"#define SetVertexOffset(vertexOffset)",
			"#define SetViewMat(matrix)",
			"#define SetWorldMat(matrix)",
			"#define SparseSetV3iAdd(type, setPntr, key)",
			"#define SparseSetV3iAddOrReplace(type, setPntr, key)",
			"#define SparseSetV3iAddValue(type, setPntr, key, value)",
			"#define SparseSetV3iGet(type, setPntr, key)",
			"#define SparseSetV3iLoop(setPntr, indexVarName)",
			"#define SparseSetV3iLoopGet(type, varName, setPntr, indexVarName)",
			"#define SparseSetV3iSetValue(type, setPntr, key, value)",
			"#define SparseSetV3i_GetSlotPntr(itemSize, itemAlignment, slotsPntr, index)",
			"#define SparseSetV3i_Hash(x, y, z)",
			"#define SparseSetV3i_IsEmpty(vector)",
			"#define SparseSetV3i_ItemOffset(itemAlignment)",
			"#define SparseSetV3i_SlotSize(itemSize, itemAlignment)",
			"#define SwapValues(type, variable1, variable2)",
			"#define Tenth(value)",
			"#define Tera(value)",
			"#define Thousand(value)",
			"#define Thousandth(value)",
			"#define ToDegrees32(radians)",
			"#define ToDegrees64(radians)",
			"#define ToRadians32(degrees)",
			"#define ToRadians64(degrees)",
			"#define Trillion(value)",
			"#define Trillionth(value)",
			"#define TwoPassBytes(twoPassStrPntr, numBytes, bytesPntr)",
			"#define TwoPassChar(twoPassStrPntr, character)",
			"#define TwoPassStr(twoPassStrPntr, str8)",
			"#define TwoPassStr8Loop(structName, arenaPntr, addNullTerm)",
			"#define TwoPassStr8LoopEnd(twoPassStrPntr)",
			"#define TwoPassStrNt(twoPassStrPntr, nullTermStr)",
			"#define UISCALE_BORDER(scale, pixels)",
			"#define UISCALE_R32(scale, pixels)",
			"#define UISCALE_U16(scale, pixels)",
			"#define VarArrayAdd(type, arrayPntr)",
			"#define VarArrayAddMulti(type, arrayPntr, numItems)",
			"#define VarArrayAddValue(type, arrayPntr, value)",
			"#define VarArrayAddValues(type, arrayPntr, numValues, valuesPntr)",
			"#define VarArrayContains(type, arrayPntr, itemPntrInQuestion)",
			"#define VarArrayCopy(destArray, sourceArray, arenaPntr)",
			"#define VarArrayGet(type, arrayPntr, index)",
			"#define VarArrayGetAndRemoveValueAt(type, arrayPntr, index)",
			"#define VarArrayGetFirst(type, arrayPntr)",
			"#define VarArrayGetFirstHard(type, arrayPntr)",
			"#define VarArrayGetFirstSoft(type, arrayPntr)",
			"#define VarArrayGetFirstValue(type, arrayPntr)",
			"#define VarArrayGetFirstValueHard(type, arrayPntr)",
			"#define VarArrayGetHard(type, arrayPntr, index)",
			"#define VarArrayGetIndexOf(type, arrayPntr, itemInQuestion, indexOut)",
			"#define VarArrayGetLast(type, arrayPntr)",
			"#define VarArrayGetLastHard(type, arrayPntr)",
			"#define VarArrayGetLastSoft(type, arrayPntr)",
			"#define VarArrayGetLastValue(type, arrayPntr)",
			"#define VarArrayGetLastValueHard(type, arrayPntr)",
			"#define VarArrayGetSoft(type, arrayPntr, index)",
			"#define VarArrayGetValue(type, arrayPntr, index)",
			"#define VarArrayGetValueHard(type, arrayPntr, index)",
			"#define VarArrayInsert(type, arrayPntr, index)",
			"#define VarArrayInsertValue(type, arrayPntr, index, value)",
			"#define VarArrayLoop(arrayPntr, indexVarName)",
			"#define VarArrayLoopGet(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayLoopGetValue(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayPop(type, arrayPntr)",
			"#define VarArrayPush(type, arrayPntr, value)",
			"#define VarArrayRemove(type, arrayPntr, itemPntr)",
			"#define VarArrayRemoveAt(type, arrayPntr, index)",
			"#define VarArrayRemoveFirst(type, arrayPntr)",
			"#define VarArrayRemoveLast(type, arrayPntr)",
			"#define XmlGetAttributeOrBreak(file, attributeName, element)",
			"#define XmlGetAttributeR32OrBreak(file, element, attributeName)",
			"#define XmlGetOneChildOrBreak(file, type, parent)",
			"BktArrayBkt* BktArrayGetBucket(BktArray* array, uxx bucketIndex)",
			"Circle NewCircle(r32 x, r32 y, r32 radius)",
			"Circle NewCircleV(v2 center, r32 radius)",
			"ClayId ToClayId(Str8 idStr)",
			"ClayId ToClayIdEx(Str8 idStr, uxx index)",
			"ClayId ToClayIdNt(const char* idNullTermString)",
			"Clay_RenderCommandArray EndClayUIRender(ClayUI* clay)",
			"CustomFontCharRange NewCustomFontCharRange(uxx numGlyphs, CustomFontGlyph* glyph)",
			"CustomFontCharRange NewCustomFontCharRangeSingle(CustomFontGlyph* glyph)",
			"DataStream ToDataStreamFromBuffer(Slice buffer)",
			"DataStream ToDataStreamFromFile(OsFile* osFilePntr)",
			"DoUiResizableSplit(UiResizableSplitSection section, UiWidgetContext* context, UiResizableSplit* split)",
			"FilePath AllocFilePath(Arena* arena, Str8 pathStr, bool addNullTerm)",
			"FilePath AllocFolderPath(Arena* arena, Str8 pathStr, bool addNullTerm)",
			"FilePath GetFileFolderPart(FilePath path)",
			"FilePath OsGetFullPath(Arena* arena, FilePath relativePath)",
			"FilePath ShortenFilePath(Arena* arena, FilePath fullPath, uxx maxNumChars, Str8 ellipsesStr)",
			"FontAtlas* GetDefaultFontAtlas(PigFont* font)",
			"FontAtlas* GetFontAtlas(PigFont* font, r32 fontSize, u8 styleFlags)",
			"FontCharRange NewFontCharRange(u32 startCodepoint, u32 endCodepoint)",
			"FontCharRange NewFontCharRangeLength(u32 startCodepoint, u32 numCodepoints)",
			"FontCharRange NewFontCharRangeSingle(u32 codepoint)",
			"FontGlyph* GetFontGlyphForCodepoint(PigFont* font, u32 codepoint, r32 fontSize, u8 styleFlags, FontAtlas** atlasOut)",
			"Hash128 MeowHash128(const void* bufferPntr, u64 numBytes)",
			"HttpConnection* OsFindHttpConnection(HttpRequestManager* manager, Str8 hostname, u16 portNumber)",
			"HttpRequest* OsMakeHttpRequest(HttpRequestManager* manager, const HttpRequestArgs* args, u64 programTime)",
			"Line2DR64 NewLine2DR64(r64 startX, r64 startY, r64 endX, r64 endY)",
			"Line2DR64 NewLine2DR64V(v2d start, v2d end)",
			"LineParser NewLineParser(Str8 inputStr)",
			"OsFileIter OsIterateFiles(Arena* arena, FilePath path, bool includeFiles, bool includeFolders)",
			"OsmNode* AddOsmNode(OsmMap* map, v2d location, u64 id)",
			"OsmNode* FindOsmNode(OsmMap* map, u64 nodeId)",
			"OsmRelation* AddOsmRelation(OsmMap* map, u64 id, uxx numMembersExpected)",
			"OsmRelation* FindOsmRelation(OsmMap* map, u64 relationId)",
			"OsmWay* AddOsmWay(OsmMap* map, u64 id, u64 numNodes, u64* nodeIds)",
			"OsmWay* FindOsmWay(OsmMap* map, u64 wayId)",
			"PEXPI bool AreEqualBox(box left, box right)",
			"PEXPI bool AreEqualBoxd(boxd left, boxd right)",
			"PEXPI bool AreEqualBoxi(boxi left, boxi right)",
			"PEXPI bool AreEqualObb2(obb2 left, obb2 right)",
			"PEXPI bool AreEqualObb2d(obb2d left, obb2d right)",
			"PEXPI bool AreEqualObb3(obb3 left, obb3 right)",
			"PEXPI bool AreEqualObb3d(obb3d left, obb3d right)",
			"PEXPI bool AreEqualQuat(quat left, quat right)",
			"PEXPI bool AreEqualQuatd(quatd left, quatd right)",
			"PEXPI bool AreEqualRec(rec left, rec right)",
			"PEXPI bool AreEqualRecd(recd left, recd right)",
			"PEXPI bool AreEqualReci(reci left, reci right)",
			"PEXPI bool IsInsideRecd(recd rectangle, v2d position)",
			"PEXPI bool IsInsideRecdInclusive(rec rectangle, v2d position)",
			"PEXPI box AddBox(box boundingBox, v3 offset)",
			"PEXPI box DivBox(box boundingBox, v3 divisor)",
			"PEXPI box InflateBox(box boundingBox, r32 amount)",
			"PEXPI box InflateBoxEx(box boundingBox, r32 leftAmount, r32 rightAmount, r32 topAmount, r32 bottomAmount, r32 backAmount, r32 frontAmount)",
			"PEXPI box InflateBoxX(box boundingBox, r32 amount)",
			"PEXPI box InflateBoxY(box boundingBox, r32 amount)",
			"PEXPI box InflateBoxZ(box boundingBox, r32 amount)",
			"PEXPI box MulBox(box boundingBox, v3 scale)",
			"PEXPI box ScaleBox(box boundingBox, r32 scalar)",
			"PEXPI box ShrinkBox(box boundingBox, r32 divisor)",
			"PEXPI box SubBox(box boundingBox, v3 offset)",
			"PEXPI box ToBoxFromd(boxd boundingBox)",
			"PEXPI box ToBoxFromi(boxi boundingBox)",
			"PEXPI boxd AddBoxd(boxd boundingBox, v3d offset)",
			"PEXPI boxd BothBoxd(boxd left, boxd right)",
			"PEXPI boxd DivBoxd(boxd boundingBox, v3d divisor)",
			"PEXPI boxd InflateBoxd(boxd boundingBox, r64 amount)",
			"PEXPI boxd InflateBoxdEx(boxd boundingBox, r64 leftAmount, r64 rightAmount, r64 topAmount, r64 bottomAmount, r64 backAmount, r64 frontAmount)",
			"PEXPI boxd InflateBoxdX(boxd boundingBox, r64 amount)",
			"PEXPI boxd InflateBoxdY(boxd boundingBox, r64 amount)",
			"PEXPI boxd InflateBoxdZ(boxd boundingBox, r64 amount)",
			"PEXPI boxd MulBoxd(boxd boundingBox, v3d scale)",
			"PEXPI boxd NewBoxd(r64 x, r64 y, r64 z, r64 width, r64 height, r64 depth)",
			"PEXPI boxd NewBoxdBetween(r64 left, r64 bottom, r64 back, r64 right, r64 top, r64 front)",
			"PEXPI boxd NewBoxdBetweenV(v3d bottomLeftBack, v3d topRightFront)",
			"PEXPI boxd NewBoxdCentered(r64 centerX, r64 centerY, r64 centerZ, r64 width, r64 height, r64 depth)",
			"PEXPI boxd NewBoxdCenteredV(v3d center, v3d size)",
			"PEXPI boxd NewBoxdV(v3d bottomLeftBack, v3d size)",
			"PEXPI boxd OverlapPartBoxd(boxd left, boxd right)",
			"PEXPI boxd RelativeBoxd(boxd reference, boxd subReference, boxd other)",
			"PEXPI boxd ScaleBoxd(boxd boundingBox, r64 scalar)",
			"PEXPI boxd ShrinkBoxd(boxd boundingBox, r64 divisor)",
			"PEXPI boxd SubBoxd(boxd boundingBox, v3d offset)",
			"PEXPI boxd ToBoxdFromf(box boundingBox)",
			"PEXPI boxd ToBoxdFromi(boxi boundingBox)",
			"PEXPI boxi AddBoxi(boxi boundingBox, v3i offset)",
			"PEXPI boxi DivBoxi(boxi boundingBox, v3i divisor)",
			"PEXPI boxi InflateBoxi(boxi boundingBox, i32 amount)",
			"PEXPI boxi InflateBoxiEx(boxi boundingBox, i32 leftAmount, i32 rightAmount, i32 topAmount, i32 bottomAmount, i32 backAmount, i32 frontAmount)",
			"PEXPI boxi InflateBoxiX(boxi boundingBox, i32 amount)",
			"PEXPI boxi InflateBoxiY(boxi boundingBox, i32 amount)",
			"PEXPI boxi InflateBoxiZ(boxi boundingBox, i32 amount)",
			"PEXPI boxi MulBoxi(boxi boundingBox, v3i scale)",
			"PEXPI boxi ScaleBoxi(boxi boundingBox, i32 scalar)",
			"PEXPI boxi ShrinkBoxi(boxi boundingBox, i32 divisor)",
			"PEXPI boxi SubBoxi(boxi boundingBox, v3i offset)",
			"PEXPI boxi ToBoxiFromf(box boundingBox)",
			"PEXPI obb2 AddObb2(obb2 boundingBox, v2 offset)",
			"PEXPI obb2 DivObb2(obb2 boundingBox, v2 divisor)",
			"PEXPI obb2 MulObb2(obb2 boundingBox, v2 scale)",
			"PEXPI obb2 ScaleObb2(obb2 boundingBox, r32 scalar)",
			"PEXPI obb2 ShrinkObb2(obb2 boundingBox, r32 divisor)",
			"PEXPI obb2 SubObb2(obb2 boundingBox, v2 offset)",
			"PEXPI obb2 ToObb2FromRec(rec rectangle)",
			"PEXPI obb2d AddObb2d(obb2d boundingBox, v2d offset)",
			"PEXPI obb2d DivObb2d(obb2d boundingBox, v2d divisor)",
			"PEXPI obb2d MulObb2d(obb2d boundingBox, v2d scale)",
			"PEXPI obb2d NewObb2d(r64 x, r64 y, r64 width, r64 height, r64 rotation)",
			"PEXPI obb2d NewObb2dV(v2d center, v2d size, r64 rotation)",
			"PEXPI obb2d ScaleObb2d(obb2d boundingBox, r64 scalar)",
			"PEXPI obb2d ShrinkObb2d(obb2d boundingBox, r64 divisor)",
			"PEXPI obb2d SubObb2d(obb2d boundingBox, v2d offset)",
			"PEXPI obb2d ToObb2dFromRecd(recd rectangle)",
			"PEXPI obb3 AddObb3(obb3 boundingBox, v3 offset)",
			"PEXPI obb3 DivObb3(obb3 boundingBox, v3 divisor)",
			"PEXPI obb3 MulObb3(obb3 boundingBox, v3 scale)",
			"PEXPI obb3 ScaleObb3(obb3 boundingBox, r32 scalar)",
			"PEXPI obb3 ShrinkObb3(obb3 boundingBox, r32 divisor)",
			"PEXPI obb3 SubObb3(obb3 boundingBox, v3 offset)",
			"PEXPI obb3 ToObb3FromBox(box boundingBox)",
			"PEXPI obb3d AddObb3d(obb3d boundingBox, v3d offset)",
			"PEXPI obb3d DivObb3d(obb3d boundingBox, v3d divisor)",
			"PEXPI obb3d MulObb3d(obb3d boundingBox, v3d scale)",
			"PEXPI obb3d NewObb3d(r64 x, r64 y, r64 z, r64 width, r64 height, r64 depth, quatd rotation)",
			"PEXPI obb3d NewObb3dV(v3d center, v3d size, quatd rotation)",
			"PEXPI obb3d ScaleObb3d(obb3d boundingBox, r64 scalar)",
			"PEXPI obb3d ShrinkObb3d(obb3d boundingBox, r64 divisor)",
			"PEXPI obb3d SubObb3d(obb3d boundingBox, v3d offset)",
			"PEXPI obb3d ToObb3dFromBoxd(boxd boundingBox)",
			"PEXPI quatd AddQuatd(quatd left, quatd right)",
			"PEXPI quatd InvertQuatd(quatd quaternion)",
			"PEXPI quatd LerpQuatd(quatd start, quatd end, r64 amount)",
			"PEXPI quatd MulQuatd(quatd left, quatd right)",
			"PEXPI quatd SlerpQuatd(quatd start, quatd end, r64 amount)",
			"PEXPI quatd SubQuatd(quatd left, quatd right)",
			"PEXPI quatd SubQuatd(quatd left, quatd right)",
			"PEXPI quatd ToQuatdFromAxis(v3d axis, r64 angle)",
			"PEXPI rec AddRec(rec rectangle, v2 offset)",
			"PEXPI rec DivRec(rec rectangle, v2 divisor)",
			"PEXPI rec InflateRec(rec rectangle, r32 amount)",
			"PEXPI rec InflateRecEx(rec rectangle, r32 leftAmount, r32 rightAmount, r32 topAmount, r32 bottomAmount)",
			"PEXPI rec InflateRecX(rec rectangle, r32 amount)",
			"PEXPI rec InflateRecY(rec rectangle, r32 amount)",
			"PEXPI rec MulRec(rec rectangle, v2 scale)",
			"PEXPI rec ScaleRec(rec rectangle, r32 scalar)",
			"PEXPI rec ShrinkRec(rec rectangle, r32 divisor)",
			"PEXPI rec SubRec(rec rectangle, v2 offset)",
			"PEXPI rec ToRecFromV4(v4 vector)",
			"PEXPI rec ToRecFromd(recd rectangle)",
			"PEXPI rec ToRecFromi(reci rectangle)",
			"PEXPI recd AddRecd(recd rectangle, v2d offset)",
			"PEXPI recd BothRecd(recd left, recd right)",
			"PEXPI recd DivRecd(recd rectangle, v2d divisor)",
			"PEXPI recd InflateRecd(recd rectangle, r64 amount)",
			"PEXPI recd InflateRecdEx(recd rectangle, r64 leftAmount, r64 rightAmount, r64 topAmount, r64 bottomAmount)",
			"PEXPI recd InflateRecdX(recd rectangle, r64 amount)",
			"PEXPI recd InflateRecdY(recd rectangle, r64 amount)",
			"PEXPI recd MulRecd(recd rectangle, v2d scale)",
			"PEXPI recd NewRecd(r64 x, r64 y, r64 width, r64 height)",
			"PEXPI recd NewRecdBetween(r64 left, r64 top, r64 right, r64 bottom)",
			"PEXPI recd NewRecdBetweenV(v2d topLeft, v2d bottomRight)",
			"PEXPI recd NewRecdCentered(r64 centerX, r64 centerY, r64 width, r64 height)",
			"PEXPI recd NewRecdCenteredV(v2d center, v2d size)",
			"PEXPI recd NewRecdV(v2d topLeft, v2d size)",
			"PEXPI recd OverlapPartRecd(recd left, recd right)",
			"PEXPI recd RelativeRecd(recd reference, recd subReference, recd other)",
			"PEXPI recd ScaleRecd(recd rectangle, r64 scalar)",
			"PEXPI recd ShrinkRecd(recd rectangle, r64 divisor)",
			"PEXPI recd SubRecd(recd rectangle, v2d offset)",
			"PEXPI recd ToRecdFromf(rec rectangle)",
			"PEXPI recd ToRecdFromi(reci rectangle)",
			"PEXPI reci AddReci(reci rectangle, v2i offset)",
			"PEXPI reci DivReci(reci rectangle, v2i divisor)",
			"PEXPI reci InflateReci(reci rectangle, i32 amount)",
			"PEXPI reci InflateReciEx(reci rectangle, i32 leftAmount, i32 rightAmount, i32 topAmount, i32 bottomAmount)",
			"PEXPI reci InflateReciX(reci rectangle, i32 amount)",
			"PEXPI reci InflateReciY(reci rectangle, i32 amount)",
			"PEXPI reci MulReci(reci rectangle, v2i scale)",
			"PEXPI reci ScaleReci(reci rectangle, i32 scalar)",
			"PEXPI reci ShrinkReci(reci rectangle, i32 divisor)",
			"PEXPI reci SubReci(reci rectangle, v2i offset)",
			"PEXPI reci ToReciFromf(rec rectangle)",
			"PEXPI v4 ToV4FromRec(rec rectangle)",
			"PEXPI v4d ToV4dFromRecd(recd rectangle)",
			"PEXPI v4r ToV4rFromRec(rec rectangle)",
			"PEXPI void AlignBoxd(boxd* boundingBoxOut)",
			"PEXPI void AlignBoxdTo(boxd* boundingBoxOut, r64 alignmentScale)",
			"PEXPI void AlignBoxdToV3d(boxd* boundingBoxOut, v3d alignmentScale)",
			"PEXPI void AlignRecd(recd* rectangleOut)",
			"PEXPI void AlignRecdTo(recd* rectangleOut, r64 alignmentScale)",
			"PEXPI void AlignRecdToV2d(recd* rectangleOut, v2d alignmentScale)",
			"PbBuffer NewPbBuffer(uxx bufferLength, u8* bufferPntr)",
			"PbBuffer NewPbBufferInArena(Arena* arena, uxx numBytes)",
			"PigFont InitFont(Arena* arena, Str8 name)",
			"ProtobufCAllocator ProtobufAllocatorFromArena(Arena* arena)",
			"RangeUXX SliceToRangeUXX(Str8 str, Str8 slice)",
			"Result BakeFontAtlas(PigFont* font, r32 fontSize, u8 extraStyleFlags, v2i atlasSize, uxx numCharRanges, const FontCharRange* charRanges)",
			"Result BakeFontAtlasEx(PigFont* font, r32 fontSize, u8 extraStyleFlags, v2i atlasSize, uxx numCharRanges, const FontCharRange* charRanges, uxx numCustomGlyphRanges, const CustomFontCharRange* customGlyphRanges)",
			"Result OsCreateFolder(FilePath path, bool createParentFoldersIfNeeded)",
			"Result OsGetFileWriteTime(FilePath filePath, OsFileWriteTime* timeOut)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result OsReadFromOpenBinFile(OsFile* file, uxx numBytes, void* bufferOut, uxx* numBytesReadOut)",
			"Result OsReadFromOpenTextFile(OsFile* file, uxx numBytes, void* bufferOut, uxx* numBytesReadOut)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"Result TryParseMapFile(Arena* arena, FilePath filePath, OsmMap* mapOut)",
			"Result TryParsePbfMap(Arena* arena, DataStream* protobufStream, OsmMap* mapOut)",
			"Slice OsReadBinFileScratch(FilePath path)",
			"Slice OsReadFileScratch(FilePath path, bool convertNewLines)",
			"Slice ZlibDecompressIntoArena(Arena* arena, Slice compressedBytes, uxx expectedSize)",
			"Sphere NewSphere(r32 x, r32 y, r32 z, r32 radius)",
			"Sphere NewSphereV(v3 center, r32 radius)",
			"Str16 NewStr16(uxx length, const void* pntr)",
			"Str16 Str16Lit(const char16_t* nullTermStr)",
			"Str8 AllocStrAndCopy(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"Str8 AllocStrAndCopyNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"Str8 EscapeString(Arena* arena, Str8 rawString)",
			"Str8 EscapeStringEx(Arena* arena, Str8 rawString, u8 escapeSequences, bool addNullTerm)",
			"Str8 EscapeXmlString(Arena* arena, Str8 rawString, bool addNullTerm)",
			"Str8 GetFileExtPart(FilePath path, bool includeSubExtensions, bool includeLeadingPeriod)",
			"Str8 GetFileNamePart(FilePath path, bool includeExtension)",
			"Str8 GetOsmRelationTagValue(OsmRelation* relation, Str8 tagKey, Str8 defaultValue)",
			"Str8 GetPathPart(FilePath path, ixx partIndex, bool includeEmptyBeginOrEnd)",
			"Str8 JoinStringsInArena(Arena* arena, Str8 left, Str8 right, bool addNullTerm)",
			"Str8 JoinStringsInArena3(Arena* arena, Str8 left, Str8 middle, Str8 right, bool addNullTerm)",
			"Str8 JoinStringsInArenaWithChar(Arena* arena, Str8 left, char sepChar, Str8 right, bool addNullTerm)",
			"Str8 NewStr8(uxx length, const void* pntr)",
			"Str8 OsReadTextFileScratch(FilePath path)",
			"Str8 SerializeOsmMap(Arena* arena, OsmMap* map)",
			"Str8 StrLit(const char* nullTermStr)",
			"Str8 StrReplace(Arena* arena, Str8 str, Str8 target, Str8 replacement, bool addNullTerm)",
			"Str8 StrSlice(Str8 target, uxx startIndex, uxx endIndex)",
			"Str8 StrSliceFrom(Str8 target, uxx startIndex)",
			"Str8 StrSliceLength(Str8 target, uxx startIndex, uxx length)",
			"Str8 StrSliceMaxLength(Str8 target, uxx startIndex, uxx maxLength)",
			"Str8 StrSliceRange(Str8 str, RangeUXX range)",
			"Str8 ToStr8FromRange(StrRange strRange)",
			"Str8 TrimLeadingWhitespace(Str8 target)",
			"Str8 TrimLeadingWhitespaceAndNewLines(Str8 target)",
			"Str8 TrimTrailingWhitespace(Str8 target)",
			"Str8 TrimTrailingWhitespaceAndNewLines(Str8 target)",
			"Str8 TrimWhitespace(Str8 target)",
			"Str8 TrimWhitespaceAndNewLines(Str8 target)",
			"Str8 UnescapeString(Arena* arena, Str8 escapedString)",
			"Str8 UnescapeStringEx(Arena* arena, Str8 escapedString, u8 escapeSequences, bool addNullTerm)",
			"Str8 XmlGetAttribute(XmlFile* file, XmlElement* element, Str8 attributeName)",
			"Str8 XmlGetAttributeOrDefault(XmlFile* file, XmlElement* element, Str8 attributeName, Str8 defaultValue)",
			"Str8Pair NewStr8Pair(Str8 left, Str8 right)",
			"StrRange NewStrRange(Str8 str, RangeUXX range)",
			"StrRange ToStrRange(Str8 str, Str8 slice)",
			"TextMeasure MeasureTextEx(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, Str8 text)",
			"TextParser NewTextParser(Str8 inputStr)",
			"Texture InitTexture(Arena* arena, Str8 name, v2i size, const void* pixelsPntr, u8 flags)",
			"Texture* GetMapTileTexture(v3i coord, bool loadFromDisk, bool download)",
			"TwoPassStr8 NewTwoPassStr8(Arena* arena, bool addNullTerm)",
			"Vec2R64Slice SimplifyPolygonInArenaR64(Arena* arena, uxx numPolyVerts, const v2d* polyVerts, r64 epsilon)",
			"Vec2Slice SimplifyPolygonInArena(Arena* arena, uxx numPolyVerts, const v2* polyVerts, r32 epsilon)",
			"XmlElement* XmlGetChild(XmlFile* file, XmlElement* parent, Str8 type, u64 index)",
			"XmlElement* XmlGetNextChild(XmlFile* file, XmlElement* parent, Str8 type, XmlElement* prevChild)",
			"XmlElement* XmlGetOneChild(XmlFile* file, XmlElement* parent, Str8 type)",
			"XmlParserResult XmlCreateError(XmlParser* parser, bool isWarning, const char* formatString, ...)",
			"XmlParserResult XmlParseStep(XmlParser* parser)",
			"bool APP_BEFORE_RELOAD_DEF(PlatformInfo* inPlatformInfo, PlatformApi* inPlatformApi, void* memoryPntr)",
			"bool AreEqualHash128(Hash128 left, Hash128 right)",
			"bool AreEqualV2d(v2d left, v2d right)",
			"bool AreEqualV2i(v2i left, v2i right)",
			"bool AreEqualV3d(v3d left, v3d right)",
			"bool AreEqualV3i(v3i left, v3i right)",
			"bool AreEqualV4d(v4d left, v4d right)",
			"bool AreEqualV4i(v4i left, v4i right)",
			"bool AreEqualV4r(v4r left, v4r right)",
			"bool DoesFontAtlasContainCodepoint(const FontAtlas* atlas, u32 codepoint)",
			"bool DoesFontAtlasContainCodepointEx(const FontAtlas* atlas, u32 codepoint, uxx* glyphIndexOut)",
			"bool DoesNtStrContainMultibyteUtf8Chars(const char* nullTermStr)",
			"bool DoesPathHaveExt(FilePath path)",
			"bool DoesPathHaveTrailingSlash(FilePath path)",
			"bool DoesStrContainMultibyteUtf8Chars(Str8 str)",
			"bool EvictUnusedLoadedMapTile()",
			"bool FindNextWhitespaceInStr(Str8 target, uxx startIndex)",
			"bool IsBktArrayInit(const BktArray* array)",
			"bool IsBufferNullTerminated(uxx bufferSize, const void* bufferPntr)",
			"bool IsDataStreamFinished(const DataStream* stream)",
			"bool IsDataStreamMemoryBacked(const DataStream* stream)",
			"bool IsInsideTriangleR64(v2d p0, v2d p1, v2d p2, v2d test)",
			"bool IsPointerInRemap(const PointerRemap* remap, const void* pointer)",
			"bool IsPolygonClockwise(u64 numVertices, v2* vertices)",
			"bool IsPolygonClockwiseR64(uxx numVertices, v2d* vertices)",
			"bool IsSizedPointerInRemap(const PointerRemap* remap, const void* pointer, size_t size)",
			"bool IsSortedFuncs(void* structPntr, const SortApi* sortApi, CompareFunc_f* compareFunc, void* contextPntr)",
			"bool IsTriangleClockwiseR64(v2d p0, v2d p1, v2d p2)",
			"bool IsVarArrayInit(const VarArray* array)",
			"bool LineParserGetLine(LineParser* parser, Str8* lineOut)",
			"bool LineParserIsFinished(const LineParser* parser)",
			"bool MemArenaVerifyIntegrity(Arena* arena, bool assertOnFailure)",
			"bool MemArenaVerifyPaddingAround(const Arena* arena, const void* allocPntr, uxx allocSize, bool assertOnFailure)",
			"bool OsAreFileWriteTimesEqual(OsFileWriteTime left, OsFileWriteTime right)",
			"bool OsCopyFile(FilePath fromPath, FilePath toPath)",
			"bool OsDoesFileExist(FilePath path)",
			"bool OsDoesFileOrFolderExist(FilePath path, bool* isFolderOut)",
			"bool OsDoesFolderExist(FilePath path)",
			"bool OsDoesPathExist(FilePath path)",
			"bool OsIterFileStep(OsFileIter* fileIter, FilePath* pathOut, Arena* pathOutArena, bool giveFullPath)",
			"bool OsIterFileStepEx(OsFileIter* fileIter, bool* isFolderOut, FilePath* pathOut, Arena* pathOutArena, bool giveFullPath)",
			"bool OsOpenFile(Arena* arena, FilePath path, OsOpenFileMode mode, bool calculateSize, OsFile* openFileOut)",
			"bool OsReadBinFile(FilePath path, Arena* arena, Slice* contentsOut)",
			"bool OsReadFile(FilePath path, Arena* arena, bool convertNewLines, Slice* contentsOut)",
			"bool OsReadTextFile(FilePath path, Arena* arena, Str8* contentsOut)",
			"bool OsUpdateFileWatch(OsFileWatch* watch, u64 programTime)",
			"bool OsWriteBinFile(FilePath path, Str8 fileContents)",
			"bool OsWriteFile(FilePath path, Str8 fileContents, bool convertNewLines)",
			"bool OsWriteTextFile(FilePath path, Str8 fileContents)",
			"bool OsWriteToOpenBinFile(OsFile* file, Str8 fileContentsPart)",
			"bool OsWriteToOpenFile(OsFile* file, Str8 fileContentsPart, bool convertNewLines)",
			"bool OsWriteToOpenTextFile(OsFile* file, Str8 fileContentsPart)",
			"bool SaveOsmMap(FilePath filePath)",
			"bool StrAnyCaseContains(Str8 haystack, Str8 needle)",
			"bool StrAnyCaseEndsWith(Str8 target, Str8 suffix)",
			"bool StrAnyCaseEquals(Str8 left, Str8 right)",
			"bool StrAnyCaseEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"bool StrAnyCaseStartsWith(Str8 target, Str8 prefix)",
			"bool StrContains(Str8 haystack, Str8 needle, bool caseSensitive)",
			"bool StrEndsWith(Str8 target, Str8 suffix, bool caseSensitive)",
			"bool StrEquals(Str8 left, Str8 right, bool caseSensitive)",
			"bool StrEqualsAt(Str8 left, Str8 right, uxx leftIndex, bool caseSensitive)",
			"bool StrExactContains(Str8 haystack, Str8 needle)",
			"bool StrExactEndsWith(Str8 target, Str8 suffix)",
			"bool StrExactEquals(Str8 left, Str8 right)",
			"bool StrExactEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"bool StrExactStartsWith(Str8 target, Str8 prefix)",
			"bool StrStartsWith(Str8 target, Str8 prefix, bool caseSensitive)",
			"bool StrTryAnyCaseFind(Str8 haystack, Str8 needle, uxx* indexOut)",
			"bool StrTryExactFind(Str8 haystack, Str8 needle, uxx* indexOut)",
			"bool StrTryFind(Str8 haystack, Str8 needle, bool caseSensitive, uxx* indexOut)",
			"bool TextParserGetToken(TextParser* parser, ParsingToken* tokenOut)",
			"bool TryParseBool(Str8 str, bool* valueOut, Result* errorOut)",
			"bool TryParseBoolEx(Str8 str, bool* valueOut, Result* errorOut, bool strict)",
			"bool TryParseI16(Str8 str, i16* valueOut, Result* errorOut)",
			"bool TryParseI16Ex(Str8 str, i16* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseI32(Str8 str, i32* valueOut, Result* errorOut)",
			"bool TryParseI32Ex(Str8 str, i32* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseI64(Str8 str, i64* valueOut, Result* errorOut)",
			"bool TryParseI64Ex(Str8 str, i64* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseI8(Str8 str, i8* valueOut, Result* errorOut)",
			"bool TryParseI8Ex(Str8 str, i8* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseR32(Str8 str, r32* valueOut, Result* errorOut)",
			"bool TryParseR32Ex(Str8 str, r32* valueOut, Result* errorOut, bool allowSuffix, bool allowInfinityOrNan)",
			"bool TryParseR64(Str8 str, r64* valueOut, Result* errorOut)",
			"bool TryParseR64Ex(Str8 str, r64* valueOut, Result* errorOut, bool allowInfinityOrNan)",
			"bool TryParseRec(Str8 str, rec* valueOut, Result* errorOut)",
			"bool TryParseRecd(Str8 str, recd* valueOut, Result* errorOut)",
			"bool TryParseReci(Str8 str, reci* valueOut, Result* errorOut)",
			"bool TryParseU16(Str8 str, u16* valueOut, Result* errorOut)",
			"bool TryParseU16Ex(Str8 str, u16* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseU32(Str8 str, u32* valueOut, Result* errorOut)",
			"bool TryParseU32Ex(Str8 str, u32* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseU64(Str8 str, u64* valueOut, Result* errorOut)",
			"bool TryParseU64Ex(Str8 str, u64* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseU8(Str8 str, u8* valueOut, Result* errorOut)",
			"bool TryParseU8Ex(Str8 str, u8* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseV2(Str8 str, v2* valueOut, Result* errorOut)",
			"bool TryParseV2d(Str8 str, v2d* valueOut, Result* errorOut)",
			"bool TryParseV2i(Str8 str, v2i* valueOut, Result* errorOut)",
			"bool TryParseV3(Str8 str, v3* valueOut, Result* errorOut)",
			"bool TryParseV3d(Str8 str, v3d* valueOut, Result* errorOut)",
			"bool TryParseV3i(Str8 str, v3i* valueOut, Result* errorOut)",
			"bool UpdateClayScrolling(ClayUI* clay, r32 elapsedMs, bool isMouseOverOther, v2 mouseScrollDelta, bool allowTouchScrolling)",
			"bool VarArrayExpand(VarArray* array, uxx capacityRequired)",
			"char GetPbfBlobTypeChar(u8 blobType)",
			"char* AllocAndCopyChars(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"char* AllocAndCopyCharsNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"const char* GetDataStreamTypeStr(DataStreamType enumValue)",
			"const char* GetHoxmlCodeStr(hoxml_code_t code)",
			"const char* GetHttpRequestStateStr(HttpRequestState enumValue)",
			"const char* GetMapProjectionStr(MapProjection enumValue)",
			"const char* GetOsmPrimitiveTypeStr(OsmPrimitiveType enumValue)",
			"const char* GetOsmRelationMemberRoleStr(OsmRelationMemberRole enumValue)",
			"const char* GetOsmRelationMemberRoleXmlStr(OsmRelationMemberRole enumValue)",
			"const char* GetOsmRelationMemberTypeStr(OsmRelationMemberType enumValue)",
			"const char* GetOsmRelationMemberTypeXmlStr(OsmRelationMemberType enumValue)",
			"const char* GetOsmRenderLayerStr(OsmRenderLayer enumValue)",
			"i32 COMPARE_FUNC_DEF(const void* left, const void* right, void* contextPntr)",
			"i32 CompareCodepoints(u32 codepoint1, u32 codepoint2)",
			"i32 DotV2i(v2i left, v2i right)",
			"i32 DotV3i(v3i left, v3i right)",
			"i32 DotV4i(v4i left, v4i right)",
			"i32 LengthSquaredV2i(v2i vec2i)",
			"i32 LengthSquaredV3i(v3i vec3i)",
			"i32 LengthSquaredV4i(v4i vec4i)",
			"i32 OsCompareFileWriteTime(OsFileWriteTime left, OsFileWriteTime right)",
			"r32 AngleBetweenV2(v2 left, v2 right)",
			"r32 AngleBetweenV3(v3 left, v3 right)",
			"r32 DistanceToLine(v2 lineStart, v2 lineEnd, v2 position)",
			"r32 DistanceToLine2D(Line2D line, v2 point, v2* closestPointOut)",
			"r32 GetDefaultFontSize(const PigFont* font)",
			"r32 GetFontKerningBetweenCodepoints(const PigFont* font, r32 fontSize, u8 styleFlags, u32 leftCodepoint, u32 rightCodepoint)",
			"r32 GetFontKerningBetweenGlyphs(const PigFont* font, r32 fontScale, const FontGlyph* leftGlyph, const FontGlyph* rightGlyph)",
			"r32 LengthV2i(v2i vec2i)",
			"r32 LengthV3i(v3i vec3i)",
			"r32 LengthV4i(v4i vec4i)",
			"r32 XmlGetAttributeR32(XmlFile* file, XmlElement* element, Str8 attributeName)",
			"r32 XmlGetAttributeR32OrDefault(XmlFile* file, XmlElement* element, Str8 attributeName, r32 defaultValue)",
			"r64 AngleBetweenV2d(v2d left, v2d right)",
			"r64 AngleBetweenV3d(v3d left, v3d right)",
			"r64 DistanceToLine2DR64(Line2DR64 line, v2d point, v2d* closestPointOut)",
			"r64 DistanceToLineR64(v2d lineStart, v2d lineEnd, v2d position)",
			"r64 DotV2d(v2d left, v2d right)",
			"r64 DotV3d(v3d left, v3d right)",
			"r64 DotV4d(v4d left, v4d right)",
			"r64 LengthSquaredV2d(v2d vec2d)",
			"r64 LengthSquaredV3d(v3d vec3d)",
			"r64 LengthSquaredV4d(v4d vec4d)",
			"r64 LengthV2d(v2d vec2d)",
			"r64 LengthV3d(v3d vec3d)",
			"r64 LengthV4d(v4d vec4d)",
			"r64 XmlGetAttributeR64(XmlFile* file, XmlElement* element, Str8 attributeName)",
			"r64 XmlGetAttributeR64OrDefault(XmlFile* file, XmlElement* element, Str8 attributeName, r64 defaultValue)",
			"rec GetClayElementDrawRec(ClayId elementId)",
			"rec GetClayElementDrawRecNt(const char* elementIdStrNt)",
			"rec GetClayElementDrawRecStr(Str8 elementIdStr)",
			"recd GetMapScreenRec(MapView* view)",
			"u16 FnvHashU16(const void* bufferPntr, u64 numBytes)",
			"u16 MeowHashU16(const void* bufferPntr, u64 numBytes)",
			"u32 FnvHashU32(const void* bufferPntr, u64 numBytes)",
			"u32 FnvHashU32Ex(const void* bufferPntr, u64 numBytes, u32 startingState)",
			"u32 GetLowercaseCodepoint(u32 codepoint)",
			"u32 GetMonospaceCodepointFor(u32 codepoint)",
			"u32 GetRegularCodepointForMonospace(u32 monospaceCodepoint)",
			"u32 GetUppercaseCodepoint(u32 codepoint)",
			"u32 MeowHashU32(const void* bufferPntr, u64 numBytes)",
			"u64 FnvHashU64(const void* bufferPntr, u64 numBytes)",
			"u64 FnvHashU64Ex(const void* bufferPntr, u64 numBytes, u64 startingState)",
			"u64 MeowHashU64(const void* bufferPntr, u64 numBytes)",
			"u64 XmlGetAttributeU64(XmlFile* file, XmlElement* element, Str8 attributeName)",
			"u64 XmlGetAttributeU64OrDefault(XmlFile* file, XmlElement* element, Str8 attributeName, u64 defaultValue)",
			"u8 FnvHashU8(const void* bufferPntr, u64 numBytes)",
			"u8 GetCodepointBeforeIndex(const char* strPntr, u64 startIndex, u32* codepointOut)",
			"u8 GetCodepointForUcs2(u64 maxNumWords, const u16* strPntr, u32* codepointOut)",
			"u8 GetCodepointForUtf8(u64 maxNumBytes, const char* strPntr, u32* codepointOut)",
			"u8 GetCodepointForUtf8Str(Str8 str, uxx index, u32* codepointOut)",
			"u8 GetCodepointUtf8Size(u32 codepoint)",
			"u8 GetDefaultFontStyleFlags(const PigFont* font)",
			"u8 GetPrevCodepointForUtf8(u64 numBytesBeforePntr, const char* strEndPntr, u32* codepointOut)",
			"u8 GetPrevCodepointForUtf8Str(Str8 str, uxx index, u32* codepointOut)",
			"u8 GetUcs2WordsForCode(u32 codepoint, u16* wordBufferOut, bool doAssertions)",
			"u8 GetUtf8BytesForCode(u32 codepoint, u8* byteBufferOut, bool doAssertions)",
			"u8 MeowHashU8(const void* bufferPntr, u64 numBytes)",
			"u8* TryReadFromDataStream(DataStream* stream, uxx numBytes, Arena* dataArena)",
			"u8* TryReadFromDataStreamOrZeros(DataStream* stream, uxx numBytes, Arena* dataArena)",
			"uxx ArenaGetMark(Arena* arena)",
			"uxx ArenaSoftGrowBegin(const Arena* arena, const void* allocPntr, uxx allocSize)",
			"uxx ArenaSoftGrowBeginNoSize(const Arena* arena, const void* allocPntr)",
			"uxx BinarySearchFlat(void* arrayPntr, uxx numElements, uxx elementSize, const void* targetElement, CompareFunc_f* compareFunc, void* contextPntr)",
			"uxx BktArrayGetBucketIndex(BktArray* array, const void* itemPntr, uxx* innerIndexOut)",
			"uxx BktArrayGetBucketIndexAt(BktArray* array, uxx itemIndex, uxx* innerIndexOut)",
			"uxx ChangePathSlashesTo(FilePath path, char slashType)",
			"uxx CountPathParts(FilePath path, bool includeEmptyBeginOrEnd)",
			"uxx FindNextCharInStr(Str8 target, uxx startIndex, Str8 searchCharsStr)",
			"uxx FindNextCharInStrEx(Str8 target, uxx startIndex, Str8 searchCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextUnknownCharInStr(Str8 target, uxx startIndex, Str8 knownCharsStr)",
			"uxx FindNextUnknownCharInStrEx(Str8 target, uxx startIndex, Str8 knownCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextWhitespaceInStrEx(Str8 target, uxx startIndex, bool ignoreCharsInQuotes)",
			"uxx FixPathSlashes(FilePath path)",
			"uxx OsGetFullPathLength(FilePath relativePath)",
			"uxx RemoveColinearAndDuplicateVerticesR64(uxx numVertices, v2d* vertices)",
			"uxx SORT_API_GET_ELEMENT_SIZE_DEF(void* structPntr)",
			"uxx SORT_API_GET_NUM_ELEMENTS_DEF(void* structPntr)",
			"uxx SimplifyPolygon(SimpPolygon* poly, r32 epsilon)",
			"uxx SimplifyPolygonInPlace(uxx numPolyVerts, v2* polyVerts, r32 epsilon)",
			"uxx SimplifyPolygonInPlaceR64(uxx numPolyVerts, v2d* polyVerts, r64 epsilon)",
			"uxx SimplifyPolygonR64(SimpPolygonR64* poly, r64 epsilon)",
			"uxx StrAnyCaseFind(Str8 haystack, Str8 needle)",
			"uxx StrExactFind(Str8 haystack, Str8 needle)",
			"uxx StrFind(Str8 haystack, Str8 needle, bool caseSensitive)",
			"uxx UiTextboxFindClosestIndexToPos(UiTextbox* tbox, v2 screenPos)",
			"v2 AbsV2(v2 vec2)",
			"v2 CeilV2(v2 vec2)",
			"v2 ClampV2(v2 vec2, v2 minVec2, v2 maxVec2)",
			"v2 FloorV2(v2 vec2)",
			"v2 MaxV2(v2 left, v2 right)",
			"v2 MinV2(v2 left, v2 right)",
			"v2 PerpLeftV2(v2 vec2)",
			"v2 PerpRightV2(v2 vec2)",
			"v2 RoundV2(v2 vec2)",
			"v2 ToV2From3(v3 vec3);",
			"v2 ToV2From3XZ(v3 vec3);",
			"v2 ToV2From3YZ(v3 vec3);",
			"v2 ToV2Fromd(v2d vec2d);",
			"v2 ToV2Fromi(v2i vec2i);",
			"v2 Vec2Rotate(v2 vec2, r32 angle)",
			"v2d AbsV2d(v2d vec2d)",
			"v2d AddV2d(v2d left, v2d right)",
			"v2d CeilV2d(v2d vec2d)",
			"v2d ClampV2d(v2d vec2d, v2d minVec2d, v2d maxVec2d)",
			"v2d DivV2d(v2d left, v2d right)",
			"v2d FloorV2d(v2d vec2d)",
			"v2d LerpV2d(v2d start, v2d end, r64 amount)",
			"v2d MapProject(MapProjection projection, v2d geoLoc, recd mapRec)",
			"v2d MapUnproject(MapProjection projection, v2d mapPos, recd mapRec)",
			"v2d MaxV2d(v2d left, v2d right)",
			"v2d MinV2d(v2d left, v2d right)",
			"v2d MulV2d(v2d left, v2d right)",
			"v2d NewV2d(r64 x, r64 y);",
			"v2d NormalizeV2d(v2d vec2d)",
			"v2d PerpLeftV2d(v2d vec2d)",
			"v2d PerpRightV2d(v2d vec2d)",
			"v2d RoundV2d(v2d vec2d)",
			"v2d ScaleV2d(v2d left, r64 scalar)",
			"v2d ShrinkV2d(v2d left, r64 divisor)",
			"v2d SubV2d(v2d left, v2d right)",
			"v2d ToV2dFromf(v2 vec2);",
			"v2d ToV2dFromi(v2i vec2i);",
			"v2d Vec2dRotate(v2d vec2d, r64 angle)",
			"v2i AbsV2i(v2i vec2i)",
			"v2i AddV2i(v2i left, v2i right)",
			"v2i CeilV2di(v2d vec2d)",
			"v2i CeilV2i(v2 vec2)",
			"v2i ClampV2i(v2i vec2i, v2i minVec2i, v2i maxVec2i)",
			"v2i DivV2i(v2i left, v2i right)",
			"v2i FloorV2di(v2d vec2d)",
			"v2i FloorV2i(v2 vec2)",
			"v2i MulV2i(v2i left, v2i right)",
			"v2i NewV2i(i32 x, i32 y);",
			"v2i RoundV2di(v2d vec2d)",
			"v2i RoundV2i(v2 vec2)",
			"v2i ScaleV2i(v2i left, i32 scalar)",
			"v2i ShrinkV2i(v2i left, i32 divisor)",
			"v2i SubV2i(v2i left, v2i right)",
			"v2i ToV2iFrom3(v3i vec3i);",
			"v2i ToV2iFrom3XZ(v3i vec3i);",
			"v2i ToV2iFrom3YZ(v3i vec3i);",
			"v3 AbsV3(v3 vec3)",
			"v3 CeilV3(v3 vec3)",
			"v3 ClampV3(v3 vec3, v3 minVec3, v3 maxVec3)",
			"v3 FloorV3(v3 vec3)",
			"v3 MaxV3(v3 left, v3 right)",
			"v3 MinV3(v3 left, v3 right)",
			"v3 RoundV3(v3 vec3)",
			"v3 ToV3From2(v2 vec2, r32 z);",
			"v3 ToV3From2XZ(v2 vec2, r32 y);",
			"v3 ToV3From4(v4 vec4);",
			"v3 ToV3Fromd(v3d vec3d);",
			"v3 ToV3Fromi(v3i vec3i);",
			"v3 Vec3From2Angles(r32 facingDirection, r32 rotationUpDown, r32 radius)",
			"v3d AbsV3d(v3d vec3d)",
			"v3d AddV3d(v3d left, v3d right)",
			"v3d CeilV3d(v3d vec3d)",
			"v3d ClampV3d(v3d vec3d, v3d minVec3d, v3d maxVec3d)",
			"v3d CrossV3d(v3d left, v3d right)",
			"v3d DivV3d(v3d left, v3d right)",
			"v3d FloorV3d(v3d vec3d)",
			"v3d LerpV3d(v3d start, v3d end, r64 amount)",
			"v3d MaxV3d(v3d left, v3d right)",
			"v3d MinV3d(v3d left, v3d right)",
			"v3d MulV3d(v3d left, v3d right)",
			"v3d NewV3d(r64 x, r64 y, r64 z);",
			"v3d NormalizeV3d(v3d vec2d)",
			"v3d RoundV3d(v3d vec3d)",
			"v3d ScaleV3d(v3d left, r64 scalar)",
			"v3d ShrinkV3d(v3d left, r64 divisor)",
			"v3d SubV3d(v3d left, v3d right)",
			"v3d ToV3dFromf(v3 vec3);",
			"v3d ToV3dFromi(v3i vec3i);",
			"v3d Vec3dFrom2Angles(r64 facingDirection, r64 rotationUpDown, r64 radius)",
			"v3i AbsV3i(v3i vec3i)",
			"v3i AddV3i(v3i left, v3i right)",
			"v3i CeilV3di(v3d vec3d)",
			"v3i CeilV3i(v3 vec3)",
			"v3i ClampV3i(v3i vec3i, v3i minVec3i, v3i maxVec3i)",
			"v3i CrossV3i(v3i left, v3i right)",
			"v3i DivV3i(v3i left, v3i right)",
			"v3i FloorV3di(v3d vec3d)",
			"v3i FloorV3i(v3 vec3)",
			"v3i MulV3i(v3i left, v3i right)",
			"v3i NewV3i(i32 x, i32 y, i32 z);",
			"v3i RoundV3di(v3d vec3d)",
			"v3i RoundV3i(v3 vec3)",
			"v3i ScaleV3i(v3i left, i32 scalar)",
			"v3i ShrinkV3i(v3i left, i32 divisor)",
			"v3i SubV3i(v3i left, v3i right)",
			"v3i ToV3iFrom2(v2i vec2i, i32 z);",
			"v3i ToV3iFrom2XZ(v2i vec2i, i32 y);",
			"v3i ToV3iFrom4(v4i vec4i);",
			"v4 AbsV4(v4 vec4)",
			"v4 CeilV4(v4 vec4)",
			"v4 ClampV4(v4 vec4, v4 minVec4, v4 maxVec4)",
			"v4 FloorV4(v4 vec4)",
			"v4 MaxV4(v4 left, v4 right)",
			"v4 MinV4(v4 left, v4 right)",
			"v4 RoundV4(v4 vec4)",
			"v4 ToV4Fromd(v4d vec4d);",
			"v4 ToV4Fromi(v4i vec4i);",
			"v4 ToV4Fromr(v4r vec4r);",
			"v4d AbsV4d(v4d vec4d)",
			"v4d AddV4d(v4d left, v4d right)",
			"v4d CeilV4d(v4d vec4d)",
			"v4d ClampV4d(v4d vec4d, v4d minVec4d, v4d maxVec4d)",
			"v4d DivV4d(v4d left, v4d right)",
			"v4d FloorV4d(v4d vec4d)",
			"v4d LerpV4d(v4d start, v4d end, r64 amount)",
			"v4d MaxV4d(v4d left, v4d right)",
			"v4d MinV4d(v4d left, v4d right)",
			"v4d MulV4d(v4d left, v4d right)",
			"v4d NewV4d(r64 x, r64 y, r64 z, r64 w);",
			"v4d NormalizeV4d(v4d vec2d)",
			"v4d RoundV4d(v4d vec4d)",
			"v4d ScaleV4d(v4d left, r64 scalar)",
			"v4d ShrinkV4d(v4d left, r64 divisor)",
			"v4d SubV4d(v4d left, v4d right)",
			"v4d ToV4dFromf(v4 vec4);",
			"v4d ToV4dFromi(v4i vec4i);",
			"v4i AbsV4i(v4i vec4i)",
			"v4i AddV4i(v4i left, v4i right)",
			"v4i CeilV4di(v4d vec4d)",
			"v4i CeilV4i(v4 vec4)",
			"v4i ClampV4i(v4i vec4i, v4i minVec4i, v4i maxVec4i)",
			"v4i DivV4i(v4i left, v4i right)",
			"v4i FloorV4di(v4d vec4d)",
			"v4i FloorV4i(v4 vec4)",
			"v4i MulV4i(v4i left, v4i right)",
			"v4i NewV4i(i32 x, i32 y, i32 z, i32 w);",
			"v4i RoundV4di(v4d vec4d)",
			"v4i RoundV4i(v4 vec4)",
			"v4i ScaleV4i(v4i left, i32 scalar)",
			"v4i ShrinkV4i(v4i left, i32 divisor)",
			"v4i SubV4i(v4i left, v4i right)",
			"v4i ToV4iFrom3(v3i vec3i, i32 w);",
			"v4r NewV4r(r32 x, r32 y, r32 z, r32 w);",
			"v4r ToV4rFrom4(v4 vec4);",
			"void APP_AFTER_RELOAD_DEF(PlatformInfo* inPlatformInfo, PlatformApi* inPlatformApi, void* memoryPntr)",
			"void AddRemapPointer(PointerRemap* remap, const void* fromPntr, const void* toPntr)",
			"void AddRemapRange(PointerRemap* remap, uintptr_t from, uintptr_t to, size_t size, bool combineIfPossible)",
			"void AlignV2(v2* vectorOut)",
			"void AlignV2To(v2* vectorOut, r32 alignmentScale)",
			"void AlignV2ToV2(v2* vectorOut, v2 alignmentScale)",
			"void AlignV2d(v2d* vectorOut)",
			"void AlignV2dTo(v2d* vectorOut, r64 alignmentScale)",
			"void AlignV2dToV2d(v2d* vectorOut, v2d alignmentScale)",
			"void AlignV3(v3* vectorOut)",
			"void AlignV3To(v3* vectorOut, r32 alignmentScale)",
			"void AlignV3ToV3(v3* vectorOut, v3 alignmentScale)",
			"void AlignV3d(v3d* vectorOut)",
			"void AlignV3dTo(v3d* vectorOut, r64 alignmentScale)",
			"void AlignV3dToV3d(v3d* vectorOut, v3d alignmentScale)",
			"void AlignV4(v4* vectorOut)",
			"void AlignV4To(v4* vectorOut, r32 alignmentScale)",
			"void AlignV4ToV4(v4* vectorOut, v4 alignmentScale)",
			"void AlignV4d(v4d* vectorOut)",
			"void AlignV4dTo(v4d* vectorOut, r64 alignmentScale)",
			"void AlignV4dToV4d(v4d* vectorOut, v4d alignmentScale)",
			"void ArenaResetToMark(Arena* arena, uxx mark)",
			"void ArenaSoftGrowEnd(Arena* arena, void* allocPntr, uxx allocSize, uxx newSpaceUsed)",
			"void ArenaSoftGrowEndNoSize(Arena* arena, void* allocPntr, uxx newSpaceUsed)",
			"void AttachTtfFileToFont(PigFont* font, Slice ttfFileContents)",
			"void BeginClayUIRender(ClayUI* clay, v2 windowSize, bool isMouseOverOther, v2 mousePos, bool isMouseDown)",
			"void BktArrayClear(BktArray* array, bool deallocate)",
			"void BktArrayCondense(BktArray* array)",
			"void BktArrayCondenseInto(BktArray* array, Arena* intoArena, bool freeMemory)",
			"void BktArrayCopy(Arena* arena, BktArray* destArray, const BktArray* srcArray)",
			"void BktArrayDropEmptyBuckets(BktArray* array)",
			"void ClearFontAtlases(PigFont* font)",
			"void ClearMapSelection(OsmMap* map)",
			"void ClearMapTiles()",
			"void DoUiLabel(UiWidgetContext* context, Str8 idStr, uxx idIndex, Str8 label, Color32 color, PigFont* font, r32 fontSize, u8 fontStyle, bool hasCopyButton, Texture* copyBtnIcon)",
			"void DoUiTextbox(UiWidgetContext* context, UiTextbox* tbox, PigFont* font, u8 fontStyle, r32 fontSize, r32 uiScale)",
			"void FillFontKerningTable(PigFont* font)",
			"void FindInternationalCodepointsInMapNames(OsmMap* map, VarArray* codepointsOut)",
			"void FreeBtkArray(BktArray* array)",
			"void FreeFont(PigFont* font)",
			"void FreeFontAtlas(PigFont* font, FontAtlas* atlas)",
			"void FreeFontKerningTable(Arena* arena, FontKerningTable* kerningTable)",
			"void FreeMem(Arena* arena, void* allocPntr, uxx allocSize)",
			"void FreeMemAligned(Arena* arena, void* allocPntr, uxx allocSize, uxx alignmentOverride)",
			"void FreeMemNoSize(Arena* arena, void* allocPntr)",
			"void FreeOsmRelation(Arena* arena, OsmRelation* relation)",
			"void FreePbBuffer(Arena* arena, PbBuffer* buffer)",
			"void FreeRecentFile(RecentFile* recentFile)",
			"void FreeSparseSetV3i(SparseSetV3i* set)",
			"void FreeStr8(Arena* arena, Str8* stringPntr)",
			"void FreeStr8WithNt(Arena* arena, Str8* stringPntr)",
			"void FreeTexture(Texture* texture)",
			"void FreeUiResizableSplit(UiResizableSplit* split)",
			"void FreeUiTextbox(UiTextbox* tbox)",
			"void FreeVarArray(VarArray* array)",
			"void FreeXmlParser(XmlParser* parser)",
			"void HTTP_CALLBACK_DEF(plex HttpRequest* request)",
			"void InitAppInput(AppInput* input)",
			"void InitClayUI(Arena* arena, v2 windowSize, ClayMeasureText_f* measureTextFunc, void* measureUserData, ClayUI* clayOut)",
			"void InitFontTtfInfo(PigFont* font)",
			"void InitMapTiles()",
			"void InitMapView(MapView* view, MapProjection projection)",
			"void InitOsmMap(Arena* arena, OsmMap* mapOut, u64 numNodesExpected, u64 numWaysExpected, u64 numRelationsExpected)",
			"void InitPointerRemap(PointerRemap* remapOut, Arena* arena)",
			"void InitPointerRemapWithInitial(PointerRemap* remapOut, Arena* arena, uxx numRangesExpected)",
			"void InitUiResizableSplit(Arena* arena, Str8 idStr, bool horizontal, u16 dividerPadding, r32 defaultSplitPercent, UiResizableSplit* split)",
			"void InitUiTextbox(Arena* arena, Str8 idStr, Str8 initialText, UiTextbox* tbox)",
			"void InitXmlParser(Arena* arena, Str8 xmlData, bool copyXmlData, u64 numSrlInfos, const SrlInfo* srlInfos, u64 maxStackSize, XmlParser* parserOut)",
			"void LoadMapBackTexture()",
			"void MapTileHttpCallback(plex HttpRequest* request)",
			"void OpenOsmMap(FilePath filePath, bool addToMap)",
			"void OsCloseFile(OsFile* file)",
			"void OsCopyHttpRequestArgs(Arena* arena, HttpRequestArgs* dest, const HttpRequestArgs* source)",
			"void OsFreeFileIter(OsFileIter* fileIter)",
			"void OsFreeFileWatch(OsFileWatch* watch)",
			"void OsFreeHttpRequestManager(HttpRequestManager* manager)",
			"void OsInitFileWatch(Arena* arena, FilePath path, uxx checkPeriod, u64 programTime, OsFileWatch* watchOut)",
			"void OsInitHttpRequestManager(Arena* arena, HttpRequestManager* manager)",
			"void OsResetFileWatch(OsFileWatch* watch, u64 programTime)",
			"void OsUnloadDll(OsDll* dll)",
			"void OsUpdateHttpRequestManager(HttpRequestManager* manager, u64 programTime)",
			"void OsmAddFromMap(OsmMap* dstMap, const OsmMap* srcMap)",
			"void QuickSortFlat(void* arrayPntr, uxx numElements, uxx elementSize, CompareFunc_f* compareFunc, void* contextPntr)",
			"void RemoveAttachedTtfFile(PigFont* font)",
			"void RenderWayFilled(OsmWay* way, recd mapRec, rec wayOnScreenBoundsRec, Color32 fillColor, r32 borderThickness, Color32 borderColor)",
			"void RenderWayLine(OsmWay* way, recd mapScreenRec, r32 thickness, Color32 color)",
			"void SetClayContext(ClayUI* clay)",
			"void SetMapItemSelected(OsmMap* map, OsmPrimitiveType type, void* itemPntr, bool selected)",
			"void SetMapNodeSelected(OsmMap* map, OsmNode* node, bool selected)",
			"void SetMapWaySelected(OsmMap* map, OsmWay* way, bool selected)",
			"void SetTextureFilePath(Texture* texture, Str8 filePath)",
			"void SparseSetV3iClear(SparseSetV3i* set)",
			"void SparseSetV3iClearEx(SparseSetV3i* set, bool deallocate)",
			"void SparseSetV3iExpand(SparseSetV3i* set, uxx capacityRequired)",
			"void TwoPassPrint(TwoPassStr8* twoPassStrPntr, const char* formatString, ...)",
			"void UiTextboxDeleteBytes(UiTextbox* tbox, uxx startIndex, uxx numBytes)",
			"void UiTextboxDeleteSelected(UiTextbox* tbox)",
			"void UiTextboxSelectAll(UiTextbox* tbox)",
			"void UpdateMapView(MapView* view, MouseState* mouse, KeyboardState* keyboard)",
			"void UpdateOsmNodeWayBackPntrs(OsmMap* map)",
			"void UpdateOsmRelationBackPntrs(OsmMap* map)",
			"void UpdateOsmRelationPntrs(OsmMap* map, OsmRelation* relation)",
			"void UpdateOsmWayColorChoice(OsmWay* way)",
			"void UpdateOsmWayTriangulation(OsmMap* map, OsmWay* way)",
			"void VarArrayClear(VarArray* array)",
			"void VarArrayClearEx(VarArray* array, bool deallocate)",
			"void VarArrayRemove_(uxx itemSize, uxx itemAlignment, VarArray* array, const void* itemToRemove)",
			"void VarArrayVisit(VarArray* array, ArrayVisitFunc_f* visitFunc)",
			"void* AllocMem(Arena* arena, uxx numBytes)",
			"void* AllocMemAligned(Arena* arena, uxx numBytes, uxx alignmentOverride)",
			"void* ReallocMem(Arena* arena, void* allocPntr, uxx oldSize, uxx newSize)",
			"void* ReallocMemAligned(Arena* arena, void* allocPntr, uxx oldSize, uxx oldAlignmentOverride, uxx newSize, uxx newAlignmentOverride)",
			"void* ReallocMemNoOldSize(Arena* arena, void* allocPntr, uxx newSize)",
			"void* SORT_API_GET_ELEMENT_DEF(void* structPntr, uxx index)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"AppAfterReload_f",
			"AppBeforeReload_f",
			"Arena",
			"ArrayVisitFunc_f",
			"BktArray",
			"BktArrayBkt",
			"CompareFunc_f",
			"DataStream",
			"DataStreamType",
			"Hash128",
			"HttpCallback_f",
			"HttpConnection",
			"HttpRequest",
			"HttpRequestArgs",
			"HttpRequestManager",
			"HttpRequestState",
			"MapProjection",
			"MapTile",
			"MapTileHttpContext",
			"MapView",
			"OsDll",
			"OsmNodeRef",
			"OsmPrimitiveType",
			"OsmRelation",
			"OsmRelationMember",
			"OsmRelationMemberRole",
			"OsmRelationMemberType",
			"OsmRenderLayer",
			"OsmSelectedItem",
			"PointerRemap",
			"PointerRemapRange",
			"RecentFile",
			"SimpPolyVert",
			"SimpPolyVertR64",
			"SimpPolygon",
			"SimpPolygonR64",
			"SortApi",
			"SortApiGetElementSize_f",
			"SortApiGetElement_f",
			"SortApiGetNumElements_f",
			"TwoPassStr8",
			"UiTextbox",
			"VarArray",
			"Vec2R64",
			"Vec2R64Slice",
			"Vec2Slice",
			"Vec2iSlice",
			"Vec3R64",
			"Vec3R64Slice",
			"Vec3Slice",
			"Vec3iSlice",
			"Vec4R64",
			"Vec4R64Slice",
			"Vec4RawSlice",
			"Vec4Slice",
			"Vec4iSlice",
			"XmlAttribute",
			"XmlElement",
			"XmlFile",
			"mat2",
			"mat3",
			"mat4",
			"v2",
			"v2d",
			"v2i",
			"v3",
			"v3d",
			"v3i",
			"v4",
			"v4d",
			"v4i",
			"v4r",
		],
	},
}
