{
	"folders":
	[
		{
			"name": "Root",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
				"build_script.c",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
		{
			"name": "Tracy",
			"path": "core/third_party/tracy",
			"file_exclude_patterns": [
				"TracyClient.F90",
				"LICENSE",
			],
		},
		{
			"name": "hoxml",
			"path": "third_party/hoxml",
			"file_exclude_patterns": [
				"README.md",
				"LICENSE",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BUILDING_AS_DLL",
			"BUILD_GAME_DLL",
			"BUILD_GAME_EXE",
			"BUILD_INTO_SINGLE_UNIT",
			"BUILD_PIGGEN_IF_NEEDED",
			"BUILD_PIG_CORE_LIB",
			"BUILD_PIG_CORE_LIB_IF_NEEDED",
			"BUILD_TRACY_DLL",
			"CL_GENERATE_ASSEMB_LISTING",
			"COPY_TO_DATA_DIRECTORY",
			"PIG_CORE_BUILDING_AS_DLL",
			"PIG_CORE_IMPLEMENTATION",
			"PIG_CORE_INLINE",
			"PROFILING_ENABLED",
			"Result_Duplicate",
			"Result_StackOverflow",
			"Result_UnexpectedEndElement",
			"Result_WrongEndElementType",
			"TEXTBOX_INNER_PADDING_X",
			"TEXTBOX_INNER_PADDING_Y",
		],
		"custom_functions":
		[
			"#define AddClipRec(clipRec)",
			"#define AllocArray(type, arenaPntr, count)",
			"#define AllocArrayUnaligned(type, arenaPntr, count)",
			"#define AllocType(type, arenaPntr)",
			"#define AllocTypeUnaligned(type, arenaPntr)",
			"#define BeginFrame(swapchain, screenSize, clearColor, clearDepth)",
			"#define BindFont(fontPntr)",
			"#define BindFontAtSize(fontPntr, fontSize)",
			"#define BindFontEx(fontPntr, fontSize, fontStyleFlags)",
			"#define BindShader(shaderPntr)",
			"#define BindTexture(texturePntr)",
			"#define BindTextureAtIndex(texturePntr, textureIndex)",
			"#define BindVertBuffer(bufferPntr)",
			"#define BktArrayAdd(type, arrayPntr)",
			"#define BktArrayAddArray(type, destArrayPntr, srcArrayPntr)",
			"#define BktArrayAddMulti(type, arrayPntr, numItems)",
			"#define BktArrayAddSomewhere(type, arrayPntr)",
			"#define BktArrayAddValue(type, arrayPntr, value)",
			"#define BktArrayAddValueSomewhere(type, arrayPntr, value)",
			"#define BktArrayAddValues(type, arrayPntr, numValues, valuesPntr)",
			"#define BktArrayAllocSize(arrayPntr, allocLength)",
			"#define BktArrayBktGetItemPntr(arrayPntr, bucketPntr, index)",
			"#define BktArrayContains(type, arrayPntr, itemInQuestion)",
			"#define BktArrayGet(type, arrayPntr, index)",
			"#define BktArrayGetHard(type, arrayPntr, index)",
			"#define BktArrayGetIndexOf(type, arrayPntr, itemInQuestion)",
			"#define BktArrayGetSoft(type, arrayPntr, index)",
			"#define BktArrayInsert(type, arrayPntr, index)",
			"#define BktArrayInsertValue(type, arrayPntr, index, value)",
			"#define BktArrayPush(type, arrayPntr, value)",
			"#define BktArrayRemove(type, arrayPntr, itemToRemovePntr)",
			"#define BktArrayRemoveAt(type, arrayPntr, index)",
			"#define DisableClipRec()",
			"#define DrawCircle(circle, color)",
			"#define DrawCirclePiece(circle, angleMin, angleMax, color)",
			"#define DrawLine(startPos, endPos, thickness, color)",
			"#define DrawObb2(boundingBox, color)",
			"#define DrawRectangle(rectangle, color)",
			"#define DrawRectangleOutline(rectangle, borderThickness, color)",
			"#define DrawRectangleOutlineEx(rectangle, borderThickness, color, outside)",
			"#define DrawRectangleOutlineSides(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color)",
			"#define DrawRectangleOutlineSidesEx(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, outside)",
			"#define DrawRing(circle, thickness, color)",
			"#define DrawRingPiece(circle, thickness, angleMin, angleMax, color)",
			"#define DrawRoundedRectangle(rectangle, radius, color)",
			"#define DrawRoundedRectangleEx(rectangle, radiusTL, radiusTR, radiusBR, radiusBL, color)",
			"#define DrawRoundedRectangleOutline(rectangle, thickness, radius, color)",
			"#define DrawRoundedRectangleOutlineEx(rectangle, thickness, radiusTL, radiusTR, radiusBR, radiusBL, color, outside)",
			"#define DrawTexturedCircle(circle, color, texture)",
			"#define DrawTexturedCircleEx(circle, color, texture, sourceRec)",
			"#define DrawTexturedCirclePiece(circle, angleMin, angleMax, color, texture)",
			"#define DrawTexturedCirclePieceEx(circle, angleMin, angleMax, color, texture, sourceRec)",
			"#define DrawTexturedObb2(boundingBox, color, texture)",
			"#define DrawTexturedObb2Ex(boundingBox, color, texture, sourceRec)",
			"#define DrawTexturedRectangle(rectangle, color, texture)",
			"#define DrawTexturedRectangleEx(rectangle, color, texture, sourceRec)",
			"#define DrawTexturedRectangleOutline(rectangle, borderThickness, color, texture)",
			"#define DrawTexturedRectangleOutlineEx(rectangle, borderThickness, color, outside, texture, sourceRec)",
			"#define DrawTexturedRectangleOutlineSides(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, texture)",
			"#define DrawTexturedRectangleOutlineSidesEx(rectangle, leftThickness, rightThickness, topThickness, bottomThickness, color, outside, texture, sourceRec)",
			"#define DrawTexturedRing(circle, thickness, color, texture)",
			"#define DrawTexturedRingEx(circle, thickness, color, texture, sourceRec)",
			"#define DrawTexturedRingPiece(circle, thickness, angleMin, angleMax, color, texture)",
			"#define DrawTexturedRingPieceEx(circle, thickness, angleMin, angleMax, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangle(rectangle, radius, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleEx(rectangle, radiusTL, radiusTR, radiusBR, radiusBL, color, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleOutline(rectangle, thickness, radius, color, outside, texture, sourceRec)",
			"#define DrawTexturedRoundedRectangleOutlineEx(rectangle, thickness, radiusTL, radiusTR, radiusBR, radiusBL, color, outside, texture, sourceRec)",
			"#define DrawVertices()",
			"#define DrawVerticesEx(startVertexOrIndex, numVerticesOrIndices)",
			"#define EndFrame()",
			"#define FlushBindings()",
			"#define FlushPipelineGen()",
			"#define FreeArray(type, arenaPntr, count, allocPntr)",
			"#define FreeType(type, arenaPntr, allocPntr)",
			"#define InitBktArray(type, arrayPntr, arenaPntr, defaultBucketSize)",
			"#define InitBktArrayWithInitial(type, arrayPntr, arenaPntr, defaultBucketSize, initialCountNeeded)",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define IsPntrWithin(regionStart, regionSize, pntr)",
			"#define IsSizedPntrWithin(regionStart, regionSize, pntr, size)",
			"#define SetClipRec(clipRec)",
			"#define SetColorWriteEnabled(colorWriteEnabled)",
			"#define SetCullingEnabled(cullingEnabled)",
			"#define SetDepth(depth)",
			"#define SetDepthTestEnabled(depthTestEnabled)",
			"#define SetDepthWriteEnabled(depthWriteEnabled)",
			"#define SetProjectionMat(matrix)",
			"#define SetSourceRec(rectangle)",
			"#define SetSourceRecRaw(rectangle)",
			"#define SetTintColor(color)",
			"#define SetTintColorRaw(colorVec)",
			"#define SetVertexOffset(vertexOffset)",
			"#define SetViewMat(matrix)",
			"#define SetWorldMat(matrix)",
			"#define UISCALE_BORDER(scale, pixels)",
			"#define UISCALE_R32(scale, pixels)",
			"#define UISCALE_U16(scale, pixels)",
			"#define VarArrayAdd(type, arrayPntr)",
			"#define VarArrayAddMulti(type, arrayPntr, numItems)",
			"#define VarArrayAddValue(type, arrayPntr, value)",
			"#define VarArrayAddValues(type, arrayPntr, numValues, valuesPntr)",
			"#define VarArrayContains(type, arrayPntr, itemPntrInQuestion)",
			"#define VarArrayCopy(destArray, sourceArray, arenaPntr)",
			"#define VarArrayGet(type, arrayPntr, index)",
			"#define VarArrayGetAndRemoveValueAt(type, arrayPntr, index)",
			"#define VarArrayGetFirst(type, arrayPntr)",
			"#define VarArrayGetFirstHard(type, arrayPntr)",
			"#define VarArrayGetFirstSoft(type, arrayPntr)",
			"#define VarArrayGetFirstValue(type, arrayPntr)",
			"#define VarArrayGetFirstValueHard(type, arrayPntr)",
			"#define VarArrayGetHard(type, arrayPntr, index)",
			"#define VarArrayGetIndexOf(type, arrayPntr, itemInQuestion, indexOut)",
			"#define VarArrayGetLast(type, arrayPntr)",
			"#define VarArrayGetLastHard(type, arrayPntr)",
			"#define VarArrayGetLastSoft(type, arrayPntr)",
			"#define VarArrayGetLastValue(type, arrayPntr)",
			"#define VarArrayGetLastValueHard(type, arrayPntr)",
			"#define VarArrayGetSoft(type, arrayPntr, index)",
			"#define VarArrayGetValue(type, arrayPntr, index)",
			"#define VarArrayGetValueHard(type, arrayPntr, index)",
			"#define VarArrayInsert(type, arrayPntr, index)",
			"#define VarArrayInsertValue(type, arrayPntr, index, value)",
			"#define VarArrayLoop(arrayPntr, indexVarName)",
			"#define VarArrayLoopGet(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayLoopGetValue(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayPop(type, arrayPntr)",
			"#define VarArrayPush(type, arrayPntr, value)",
			"#define VarArrayRemove(type, arrayPntr, itemPntr)",
			"#define VarArrayRemoveAt(type, arrayPntr, index)",
			"#define VarArrayRemoveFirst(type, arrayPntr)",
			"#define VarArrayRemoveLast(type, arrayPntr)",
			"#define XmlGetAttributeOrBreak(file, attributeName, element)",
			"#define XmlGetAttributeR32OrBreak(file, element, attributeName)",
			"#define XmlGetOneChildOrBreak(file, type, parent)",
			"BktArrayBkt* BktArrayGetBucket(BktArray* array, uxx bucketIndex)",
			"Circle NewCircle(r32 x, r32 y, r32 radius)",
			"Circle NewCircleV(v2 center, r32 radius)",
			"CustomFontCharRange NewCustomFontCharRange(uxx numGlyphs, CustomFontGlyph* glyph)",
			"CustomFontCharRange NewCustomFontCharRangeSingle(CustomFontGlyph* glyph)",
			"FontAtlas* GetDefaultFontAtlas(PigFont* font)",
			"FontCharRange NewFontCharRange(u32 startCodepoint, u32 endCodepoint)",
			"FontCharRange NewFontCharRangeLength(u32 startCodepoint, u32 numCodepoints)",
			"FontCharRange NewFontCharRangeSingle(u32 codepoint)",
			"FontGlyph* GetFontGlyphForCodepoint(PigFont* font, u32 codepoint, r32 fontSize, u8 styleFlags, FontAtlas** atlasOut)",
			"OsmNode* AddOsmNode(OsmMap* map, v2d location, u64 id)",
			"OsmNode* FindOsmNode(OsmMap* map, u64 nodeId)",
			"OsmWay* AddOsmWay(OsmMap* map, u64 id, u64 numNodes, u64* nodeIds)",
			"PEXPI bool AreEqualBox(box left, box right)",
			"PEXPI bool AreEqualBoxd(boxd left, boxd right)",
			"PEXPI bool AreEqualBoxi(boxi left, boxi right)",
			"PEXPI bool AreEqualObb2(obb2 left, obb2 right)",
			"PEXPI bool AreEqualObb2d(obb2d left, obb2d right)",
			"PEXPI bool AreEqualObb3(obb3 left, obb3 right)",
			"PEXPI bool AreEqualObb3d(obb3d left, obb3d right)",
			"PEXPI bool AreEqualQuat(quat left, quat right)",
			"PEXPI bool AreEqualQuatd(quatd left, quatd right)",
			"PEXPI bool AreEqualRec(rec left, rec right)",
			"PEXPI bool AreEqualRecd(recd left, recd right)",
			"PEXPI bool AreEqualReci(reci left, reci right)",
			"PEXPI bool AreEqualV2d(v2d left, v2d right)",
			"PEXPI bool AreEqualV3d(v3d left, v3d right)",
			"PEXPI bool AreEqualV4d(v4d left, v4d right)",
			"PEXPI bool IsInsideRecd(recd rectangle, v2d position)",
			"PEXPI bool IsInsideRecdInclusive(rec rectangle, v2d position)",
			"PEXPI box AddBox(box boundingBox, v3 offset)",
			"PEXPI box DivBox(box boundingBox, v3 divisor)",
			"PEXPI box InflateBox(box boundingBox, r32 amount)",
			"PEXPI box InflateBoxEx(box boundingBox, r32 leftAmount, r32 rightAmount, r32 topAmount, r32 bottomAmount, r32 backAmount, r32 frontAmount)",
			"PEXPI box InflateBoxX(box boundingBox, r32 amount)",
			"PEXPI box InflateBoxY(box boundingBox, r32 amount)",
			"PEXPI box InflateBoxZ(box boundingBox, r32 amount)",
			"PEXPI box MulBox(box boundingBox, v3 scale)",
			"PEXPI box ScaleBox(box boundingBox, r32 scalar)",
			"PEXPI box ShrinkBox(box boundingBox, r32 divisor)",
			"PEXPI box SubBox(box boundingBox, v3 offset)",
			"PEXPI box ToBoxFromd(boxd boundingBox)",
			"PEXPI box ToBoxFromi(boxi boundingBox)",
			"PEXPI boxd AddBoxd(boxd boundingBox, v3d offset)",
			"PEXPI boxd BothBoxd(boxd left, boxd right)",
			"PEXPI boxd DivBoxd(boxd boundingBox, v3d divisor)",
			"PEXPI boxd InflateBoxd(boxd boundingBox, r64 amount)",
			"PEXPI boxd InflateBoxdEx(boxd boundingBox, r64 leftAmount, r64 rightAmount, r64 topAmount, r64 bottomAmount, r64 backAmount, r64 frontAmount)",
			"PEXPI boxd InflateBoxdX(boxd boundingBox, r64 amount)",
			"PEXPI boxd InflateBoxdY(boxd boundingBox, r64 amount)",
			"PEXPI boxd InflateBoxdZ(boxd boundingBox, r64 amount)",
			"PEXPI boxd MulBoxd(boxd boundingBox, v3d scale)",
			"PEXPI boxd NewBoxd(r64 x, r64 y, r64 z, r64 width, r64 height, r64 depth)",
			"PEXPI boxd NewBoxdBetween(r64 left, r64 bottom, r64 back, r64 right, r64 top, r64 front)",
			"PEXPI boxd NewBoxdBetweenV(v3d bottomLeftBack, v3d topRightFront)",
			"PEXPI boxd NewBoxdCentered(r64 centerX, r64 centerY, r64 centerZ, r64 width, r64 height, r64 depth)",
			"PEXPI boxd NewBoxdCenteredV(v3d center, v3d size)",
			"PEXPI boxd NewBoxdV(v3d bottomLeftBack, v3d size)",
			"PEXPI boxd OverlapPartBoxd(boxd left, boxd right)",
			"PEXPI boxd RelativeBoxd(boxd reference, boxd subReference, boxd other)",
			"PEXPI boxd ScaleBoxd(boxd boundingBox, r64 scalar)",
			"PEXPI boxd ShrinkBoxd(boxd boundingBox, r64 divisor)",
			"PEXPI boxd SubBoxd(boxd boundingBox, v3d offset)",
			"PEXPI boxd ToBoxdFromf(box boundingBox)",
			"PEXPI boxd ToBoxdFromi(boxi boundingBox)",
			"PEXPI boxi AddBoxi(boxi boundingBox, v3i offset)",
			"PEXPI boxi DivBoxi(boxi boundingBox, v3i divisor)",
			"PEXPI boxi InflateBoxi(boxi boundingBox, i32 amount)",
			"PEXPI boxi InflateBoxiEx(boxi boundingBox, i32 leftAmount, i32 rightAmount, i32 topAmount, i32 bottomAmount, i32 backAmount, i32 frontAmount)",
			"PEXPI boxi InflateBoxiX(boxi boundingBox, i32 amount)",
			"PEXPI boxi InflateBoxiY(boxi boundingBox, i32 amount)",
			"PEXPI boxi InflateBoxiZ(boxi boundingBox, i32 amount)",
			"PEXPI boxi MulBoxi(boxi boundingBox, v3i scale)",
			"PEXPI boxi ScaleBoxi(boxi boundingBox, i32 scalar)",
			"PEXPI boxi ShrinkBoxi(boxi boundingBox, i32 divisor)",
			"PEXPI boxi SubBoxi(boxi boundingBox, v3i offset)",
			"PEXPI boxi ToBoxiFromf(box boundingBox)",
			"PEXPI obb2 AddObb2(obb2 boundingBox, v2 offset)",
			"PEXPI obb2 DivObb2(obb2 boundingBox, v2 divisor)",
			"PEXPI obb2 MulObb2(obb2 boundingBox, v2 scale)",
			"PEXPI obb2 ScaleObb2(obb2 boundingBox, r32 scalar)",
			"PEXPI obb2 ShrinkObb2(obb2 boundingBox, r32 divisor)",
			"PEXPI obb2 SubObb2(obb2 boundingBox, v2 offset)",
			"PEXPI obb2 ToObb2FromRec(rec rectangle)",
			"PEXPI obb2d AddObb2d(obb2d boundingBox, v2d offset)",
			"PEXPI obb2d DivObb2d(obb2d boundingBox, v2d divisor)",
			"PEXPI obb2d MulObb2d(obb2d boundingBox, v2d scale)",
			"PEXPI obb2d NewObb2d(r64 x, r64 y, r64 width, r64 height, r64 rotation)",
			"PEXPI obb2d NewObb2dV(v2d center, v2d size, r64 rotation)",
			"PEXPI obb2d ScaleObb2d(obb2d boundingBox, r64 scalar)",
			"PEXPI obb2d ShrinkObb2d(obb2d boundingBox, r64 divisor)",
			"PEXPI obb2d SubObb2d(obb2d boundingBox, v2d offset)",
			"PEXPI obb2d ToObb2dFromRecd(recd rectangle)",
			"PEXPI obb3 AddObb3(obb3 boundingBox, v3 offset)",
			"PEXPI obb3 DivObb3(obb3 boundingBox, v3 divisor)",
			"PEXPI obb3 MulObb3(obb3 boundingBox, v3 scale)",
			"PEXPI obb3 ScaleObb3(obb3 boundingBox, r32 scalar)",
			"PEXPI obb3 ShrinkObb3(obb3 boundingBox, r32 divisor)",
			"PEXPI obb3 SubObb3(obb3 boundingBox, v3 offset)",
			"PEXPI obb3 ToObb3FromBox(box boundingBox)",
			"PEXPI obb3d AddObb3d(obb3d boundingBox, v3d offset)",
			"PEXPI obb3d DivObb3d(obb3d boundingBox, v3d divisor)",
			"PEXPI obb3d MulObb3d(obb3d boundingBox, v3d scale)",
			"PEXPI obb3d NewObb3d(r64 x, r64 y, r64 z, r64 width, r64 height, r64 depth, quatd rotation)",
			"PEXPI obb3d NewObb3dV(v3d center, v3d size, quatd rotation)",
			"PEXPI obb3d ScaleObb3d(obb3d boundingBox, r64 scalar)",
			"PEXPI obb3d ShrinkObb3d(obb3d boundingBox, r64 divisor)",
			"PEXPI obb3d SubObb3d(obb3d boundingBox, v3d offset)",
			"PEXPI obb3d ToObb3dFromBoxd(boxd boundingBox)",
			"PEXPI quatd AddQuatd(quatd left, quatd right)",
			"PEXPI quatd InvertQuatd(quatd quaternion)",
			"PEXPI quatd LerpQuatd(quatd start, quatd end, r64 amount)",
			"PEXPI quatd MulQuatd(quatd left, quatd right)",
			"PEXPI quatd SlerpQuatd(quatd start, quatd end, r64 amount)",
			"PEXPI quatd SubQuatd(quatd left, quatd right)",
			"PEXPI quatd SubQuatd(quatd left, quatd right)",
			"PEXPI quatd ToQuatdFromAxis(v3d axis, r64 angle)",
			"PEXPI r64 LengthSquaredV2d(v2d vec2d)",
			"PEXPI r64 LengthSquaredV3d(v3d vec3d)",
			"PEXPI r64 LengthSquaredV4d(v4d vec4d)",
			"PEXPI r64 LengthV2d(v2d vec2d)",
			"PEXPI r64 LengthV3d(v3d vec3d)",
			"PEXPI r64 LengthV4d(v4d vec4d)",
			"PEXPI rec AddRec(rec rectangle, v2 offset)",
			"PEXPI rec DivRec(rec rectangle, v2 divisor)",
			"PEXPI rec InflateRec(rec rectangle, r32 amount)",
			"PEXPI rec InflateRecEx(rec rectangle, r32 leftAmount, r32 rightAmount, r32 topAmount, r32 bottomAmount)",
			"PEXPI rec InflateRecX(rec rectangle, r32 amount)",
			"PEXPI rec InflateRecY(rec rectangle, r32 amount)",
			"PEXPI rec MulRec(rec rectangle, v2 scale)",
			"PEXPI rec ScaleRec(rec rectangle, r32 scalar)",
			"PEXPI rec ShrinkRec(rec rectangle, r32 divisor)",
			"PEXPI rec SubRec(rec rectangle, v2 offset)",
			"PEXPI rec ToRecFromV4(v4 vector)",
			"PEXPI rec ToRecFromd(recd rectangle)",
			"PEXPI rec ToRecFromi(reci rectangle)",
			"PEXPI recd AddRecd(recd rectangle, v2d offset)",
			"PEXPI recd BothRecd(recd left, recd right)",
			"PEXPI recd DivRecd(recd rectangle, v2d divisor)",
			"PEXPI recd InflateRecd(recd rectangle, r64 amount)",
			"PEXPI recd InflateRecdEx(recd rectangle, r64 leftAmount, r64 rightAmount, r64 topAmount, r64 bottomAmount)",
			"PEXPI recd InflateRecdX(recd rectangle, r64 amount)",
			"PEXPI recd InflateRecdY(recd rectangle, r64 amount)",
			"PEXPI recd MulRecd(recd rectangle, v2d scale)",
			"PEXPI recd NewRecd(r64 x, r64 y, r64 width, r64 height)",
			"PEXPI recd NewRecdBetween(r64 left, r64 top, r64 right, r64 bottom)",
			"PEXPI recd NewRecdBetweenV(v2d topLeft, v2d bottomRight)",
			"PEXPI recd NewRecdCentered(r64 centerX, r64 centerY, r64 width, r64 height)",
			"PEXPI recd NewRecdCenteredV(v2d center, v2d size)",
			"PEXPI recd NewRecdV(v2d topLeft, v2d size)",
			"PEXPI recd OverlapPartRecd(recd left, recd right)",
			"PEXPI recd RelativeRecd(recd reference, recd subReference, recd other)",
			"PEXPI recd ScaleRecd(recd rectangle, r64 scalar)",
			"PEXPI recd ShrinkRecd(recd rectangle, r64 divisor)",
			"PEXPI recd SubRecd(recd rectangle, v2d offset)",
			"PEXPI recd ToRecdFromf(rec rectangle)",
			"PEXPI recd ToRecdFromi(reci rectangle)",
			"PEXPI reci AddReci(reci rectangle, v2i offset)",
			"PEXPI reci DivReci(reci rectangle, v2i divisor)",
			"PEXPI reci InflateReci(reci rectangle, i32 amount)",
			"PEXPI reci InflateReciEx(reci rectangle, i32 leftAmount, i32 rightAmount, i32 topAmount, i32 bottomAmount)",
			"PEXPI reci InflateReciX(reci rectangle, i32 amount)",
			"PEXPI reci InflateReciY(reci rectangle, i32 amount)",
			"PEXPI reci MulReci(reci rectangle, v2i scale)",
			"PEXPI reci ScaleReci(reci rectangle, i32 scalar)",
			"PEXPI reci ShrinkReci(reci rectangle, i32 divisor)",
			"PEXPI reci SubReci(reci rectangle, v2i offset)",
			"PEXPI reci ToReciFromf(rec rectangle)",
			"PEXPI v2 ToV2Fromd(v2d vec2d)",
			"PEXPI v2d AbsV2d(v2d vec2d)",
			"PEXPI v2d AddV2d(v2d left, v2d right)",
			"PEXPI v2d CeilV2d(v2d vec2d)",
			"PEXPI v2d ClampV2d(v2d vec2d, v2d minVec2d, v2d maxVec2d)",
			"PEXPI v2d DivV2d(v2d left, v2d right)",
			"PEXPI v2d FloorV2d(v2d vec2d)",
			"PEXPI v2d LerpV2d(v2d start, v2d end, r64 amount)",
			"PEXPI v2d MaxV2d(v2d left, v2d right)",
			"PEXPI v2d MinV2d(v2d left, v2d right)",
			"PEXPI v2d MulV2d(v2d left, v2d right)",
			"PEXPI v2d NormalizeV2d(v2d vec2d)",
			"PEXPI v2d PerpLeftV2d(v2d vec2d)",
			"PEXPI v2d PerpRightV2d(v2d vec2d)",
			"PEXPI v2d RoundV2d(v2d vec2d)",
			"PEXPI v2d ScaleV2d(v2d left, r64 scalar)",
			"PEXPI v2d ShrinkV2d(v2d left, r64 divisor)",
			"PEXPI v2d SubV2d(v2d left, v2d right)",
			"PEXPI v2d ToV2dFromf(v2 vec2)",
			"PEXPI v2d ToV2dFromi(v2i vec2i)",
			"PEXPI v2i CeilV2di(v2d vec2d)",
			"PEXPI v2i FloorV2di(v2d vec2d)",
			"PEXPI v2i RoundV2di(v2d vec2d)",
			"PEXPI v3 ToV3Fromd(v3d vec3d)",
			"PEXPI v3d AbsV3d(v3d vec3d)",
			"PEXPI v3d AddV3d(v3d left, v3d right)",
			"PEXPI v3d CeilV3d(v3d vec3d)",
			"PEXPI v3d ClampV3d(v3d vec3d, v3d minVec3d, v3d maxVec3d)",
			"PEXPI v3d CrossV3d(v3d left, v3d right)",
			"PEXPI v3d DivV3d(v3d left, v3d right)",
			"PEXPI v3d FloorV3d(v3d vec3d)",
			"PEXPI v3d LerpV3d(v3d start, v3d end, r64 amount)",
			"PEXPI v3d MaxV3d(v3d left, v3d right)",
			"PEXPI v3d MinV3d(v3d left, v3d right)",
			"PEXPI v3d MulV3d(v3d left, v3d right)",
			"PEXPI v3d NormalizeV3d(v3d vec2d)",
			"PEXPI v3d RoundV3d(v3d vec3d)",
			"PEXPI v3d ScaleV3d(v3d left, r64 scalar)",
			"PEXPI v3d ShrinkV3d(v3d left, r64 divisor)",
			"PEXPI v3d SubV3d(v3d left, v3d right)",
			"PEXPI v3d ToV3dFromf(v3 vec3)",
			"PEXPI v3d ToV3dFromi(v3i vec3i)",
			"PEXPI v3i CeilV3di(v3d vec3d)",
			"PEXPI v3i FloorV3di(v3d vec3d)",
			"PEXPI v3i RoundV3di(v3d vec3d)",
			"PEXPI v4 ToV4FromRec(rec rectangle)",
			"PEXPI v4 ToV4Fromd(v4d vec4d)",
			"PEXPI v4d AbsV4d(v4d vec4d)",
			"PEXPI v4d AddV4d(v4d left, v4d right)",
			"PEXPI v4d CeilV4d(v4d vec4d)",
			"PEXPI v4d ClampV4d(v4d vec4d, v4d minVec4d, v4d maxVec4d)",
			"PEXPI v4d DivV4d(v4d left, v4d right)",
			"PEXPI v4d FloorV4d(v4d vec4d)",
			"PEXPI v4d LerpV4d(v4d start, v4d end, r64 amount)",
			"PEXPI v4d MaxV4d(v4d left, v4d right)",
			"PEXPI v4d MinV4d(v4d left, v4d right)",
			"PEXPI v4d MulV4d(v4d left, v4d right)",
			"PEXPI v4d NormalizeV4d(v4d vec2d)",
			"PEXPI v4d RoundV4d(v4d vec4d)",
			"PEXPI v4d ScaleV4d(v4d left, r64 scalar)",
			"PEXPI v4d ShrinkV4d(v4d left, r64 divisor)",
			"PEXPI v4d SubV4d(v4d left, v4d right)",
			"PEXPI v4d ToV4dFromRecd(recd rectangle)",
			"PEXPI v4d ToV4dFromf(v4 vec4)",
			"PEXPI v4d ToV4dFromi(v4i vec4i)",
			"PEXPI v4i CeilV4di(v4d vec4d)",
			"PEXPI v4i FloorV4di(v4d vec4d)",
			"PEXPI v4i RoundV4di(v4d vec4d)",
			"PEXPI v4r ToV4rFromRec(rec rectangle)",
			"PEXPI void AlignBoxd(boxd* boundingBoxOut)",
			"PEXPI void AlignBoxdTo(boxd* boundingBoxOut, r64 alignmentScale)",
			"PEXPI void AlignBoxdToV3d(boxd* boundingBoxOut, v3d alignmentScale)",
			"PEXPI void AlignRecd(recd* rectangleOut)",
			"PEXPI void AlignRecdTo(recd* rectangleOut, r64 alignmentScale)",
			"PEXPI void AlignRecdToV2d(recd* rectangleOut, v2d alignmentScale)",
			"PIG_CORE_INLINE FontAtlas* GetFontAtlas(PigFont* font, r32 fontSize, u8 styleFlags)",
			"PigFont InitFont(Arena* arena, Str8 name)",
			"Result BakeFontAtlas(PigFont* font, r32 fontSize, u8 extraStyleFlags, v2i atlasSize, uxx numCharRanges, const FontCharRange* charRanges)",
			"Result BakeFontAtlasEx(PigFont* font, r32 fontSize, u8 extraStyleFlags, v2i atlasSize, uxx numCharRanges, const FontCharRange* charRanges, uxx numCustomGlyphRanges, const CustomFontCharRange* customGlyphRanges)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"Sphere NewSphere(r32 x, r32 y, r32 z, r32 radius)",
			"Sphere NewSphereV(v3 center, r32 radius)",
			"Str16 NewStr16(uxx length, const void* pntr)",
			"Str16 Str16Lit(const char16_t* nullTermStr)",
			"Str8 AllocStrAndCopy(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"Str8 AllocStrAndCopyNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"Str8 EscapeString(Arena* arena, Str8 rawString)",
			"Str8 EscapeStringEx(Arena* arena, Str8 rawString, u8 escapeSequences, bool addNullTerm)",
			"Str8 JoinStringsInArena(Arena* arena, Str8 left, Str8 right, bool addNullTerm)",
			"Str8 JoinStringsInArena3(Arena* arena, Str8 left, Str8 middle, Str8 right, bool addNullTerm)",
			"Str8 JoinStringsInArenaWithChar(Arena* arena, Str8 left, char sepChar, Str8 right, bool addNullTerm)",
			"Str8 NewStr8(uxx length, const void* pntr)",
			"Str8 StrLit(const char* nullTermStr)",
			"Str8 StrReplace(Arena* arena, Str8 str, Str8 target, Str8 replacement, bool addNullTerm)",
			"Str8 StrSlice(Str8 target, uxx startIndex, uxx endIndex)",
			"Str8 StrSliceFrom(Str8 target, uxx startIndex)",
			"Str8 StrSliceLength(Str8 target, uxx startIndex, uxx length)",
			"Str8 StrSliceMaxLength(Str8 target, uxx startIndex, uxx maxLength)",
			"Str8 TrimLeadingWhitespace(Str8 target)",
			"Str8 TrimLeadingWhitespaceAndNewLines(Str8 target)",
			"Str8 TrimTrailingWhitespace(Str8 target)",
			"Str8 TrimTrailingWhitespaceAndNewLines(Str8 target)",
			"Str8 TrimWhitespace(Str8 target)",
			"Str8 TrimWhitespaceAndNewLines(Str8 target)",
			"Str8 UnescapeString(Arena* arena, Str8 escapedString)",
			"Str8 UnescapeStringEx(Arena* arena, Str8 escapedString, u8 escapeSequences, bool addNullTerm)",
			"Str8 XmlGetAttribute(XmlFile* file, XmlElement* element, Str8 attributeName)",
			"Str8 XmlGetAttributeOrDefault(XmlFile* file, XmlElement* element, Str8 attributeName, Str8 defaultValue)",
			"Str8Pair NewStr8Pair(Str8 left, Str8 right)",
			"TextMeasure MeasureTextEx(const PigFont* font, r32 fontSize, u8 styleFlags, bool includeAdvanceX, r32 wrapWidth, Str8 text)",
			"XmlElement* XmlGetChild(XmlFile* file, XmlElement* parent, Str8 type, u64 index)",
			"XmlElement* XmlGetNextChild(XmlFile* file, XmlElement* parent, Str8 type, XmlElement* prevChild)",
			"XmlElement* XmlGetOneChild(XmlFile* file, XmlElement* parent, Str8 type)",
			"XmlParserResult XmlCreateError(XmlParser* parser, bool isWarning, const char* formatString, ...)",
			"XmlParserResult XmlParseStep(XmlParser* parser)",
			"bool DoesFontAtlasContainCodepoint(const FontAtlas* atlas, u32 codepoint)",
			"bool DoesFontAtlasContainCodepointEx(const FontAtlas* atlas, u32 codepoint, uxx* glyphIndexOut)",
			"bool DoesNtStrContainMultibyteUtf8Chars(const char* nullTermStr)",
			"bool DoesStrContainMultibyteUtf8Chars(Str8 str)",
			"bool FindNextWhitespaceInStr(Str8 target, uxx startIndex)",
			"bool IsBufferNullTerminated(uxx bufferSize, const void* bufferPntr)",
			"bool IsPointerInRemap(const PointerRemap* remap, const void* pointer)",
			"bool IsSizedPointerInRemap(const PointerRemap* remap, const void* pointer, size_t size)",
			"bool IsVarArrayInit(const VarArray* array)",
			"bool StrAnyCaseContains(Str8 haystack, Str8 needle)",
			"bool StrAnyCaseEndsWith(Str8 target, Str8 suffix)",
			"bool StrAnyCaseEquals(Str8 left, Str8 right)",
			"bool StrAnyCaseEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"bool StrAnyCaseStartsWith(Str8 target, Str8 prefix)",
			"bool StrContains(Str8 haystack, Str8 needle, bool caseSensitive)",
			"bool StrEndsWith(Str8 target, Str8 suffix, bool caseSensitive)",
			"bool StrEquals(Str8 left, Str8 right, bool caseSensitive)",
			"bool StrEqualsAt(Str8 left, Str8 right, uxx leftIndex, bool caseSensitive)",
			"bool StrExactContains(Str8 haystack, Str8 needle)",
			"bool StrExactEndsWith(Str8 target, Str8 suffix)",
			"bool StrExactEquals(Str8 left, Str8 right)",
			"bool StrExactEqualsAt(Str8 left, Str8 right, uxx leftIndex)",
			"bool StrExactStartsWith(Str8 target, Str8 prefix)",
			"bool StrStartsWith(Str8 target, Str8 prefix, bool caseSensitive)",
			"bool StrTryAnyCaseFind(Str8 haystack, Str8 needle, uxx* indexOut)",
			"bool StrTryExactFind(Str8 haystack, Str8 needle, uxx* indexOut)",
			"bool StrTryFind(Str8 haystack, Str8 needle, bool caseSensitive, uxx* indexOut)",
			"bool TryParseBool(Str8 str, bool* valueOut, Result* errorOut)",
			"bool TryParseBoolEx(Str8 str, bool* valueOut, Result* errorOut, bool strict)",
			"bool TryParseI16(Str8 str, i16* valueOut, Result* errorOut)",
			"bool TryParseI16Ex(Str8 str, i16* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseI32(Str8 str, i32* valueOut, Result* errorOut)",
			"bool TryParseI32Ex(Str8 str, i32* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseI64(Str8 str, i64* valueOut, Result* errorOut)",
			"bool TryParseI64Ex(Str8 str, i64* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseI8(Str8 str, i8* valueOut, Result* errorOut)",
			"bool TryParseI8Ex(Str8 str, i8* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseR32(Str8 str, r32* valueOut, Result* errorOut)",
			"bool TryParseR32Ex(Str8 str, r32* valueOut, Result* errorOut, bool allowSuffix, bool allowInfinityOrNan)",
			"bool TryParseR64(Str8 str, r64* valueOut, Result* errorOut)",
			"bool TryParseR64Ex(Str8 str, r64* valueOut, Result* errorOut, bool allowInfinityOrNan)",
			"bool TryParseRec(Str8 str, rec* valueOut, Result* errorOut)",
			"bool TryParseRecd(Str8 str, recd* valueOut, Result* errorOut)",
			"bool TryParseReci(Str8 str, reci* valueOut, Result* errorOut)",
			"bool TryParseU16(Str8 str, u16* valueOut, Result* errorOut)",
			"bool TryParseU16Ex(Str8 str, u16* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseU32(Str8 str, u32* valueOut, Result* errorOut)",
			"bool TryParseU32Ex(Str8 str, u32* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseU64(Str8 str, u64* valueOut, Result* errorOut)",
			"bool TryParseU64Ex(Str8 str, u64* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseU8(Str8 str, u8* valueOut, Result* errorOut)",
			"bool TryParseU8Ex(Str8 str, u8* valueOut, Result* errorOut, bool allowHex, bool allowBinary, bool allowDecimal)",
			"bool TryParseV2(Str8 str, v2* valueOut, Result* errorOut)",
			"bool TryParseV2d(Str8 str, v2d* valueOut, Result* errorOut)",
			"bool TryParseV2i(Str8 str, v2i* valueOut, Result* errorOut)",
			"bool TryParseV3(Str8 str, v3* valueOut, Result* errorOut)",
			"bool TryParseV3d(Str8 str, v3d* valueOut, Result* errorOut)",
			"bool TryParseV3i(Str8 str, v3i* valueOut, Result* errorOut)",
			"bool VarArrayExpand(VarArray* array, uxx capacityRequired)",
			"char* AllocAndCopyChars(Arena* arena, uxx numChars, const char* charsToCopy, bool addNullTerm)",
			"char* AllocAndCopyCharsNt(Arena* arena, const char* nullTermStr, bool addNullTerm)",
			"const char* GetHoxmlCodeStr(hoxml_code_t code)",
			"i32 CompareCodepoints(u32 codepoint1, u32 codepoint2)",
			"r32 GetDefaultFontSize(const PigFont* font)",
			"r32 GetFontKerningBetweenCodepoints(const PigFont* font, r32 fontSize, u8 styleFlags, u32 leftCodepoint, u32 rightCodepoint)",
			"r32 GetFontKerningBetweenGlyphs(const PigFont* font, r32 fontScale, const FontGlyph* leftGlyph, const FontGlyph* rightGlyph)",
			"r32 XmlGetAttributeR32(XmlFile* file, XmlElement* element, Str8 attributeName)",
			"r32 XmlGetAttributeR32OrDefault(XmlFile* file, XmlElement* element, Str8 attributeName, r32 defaultValue)",
			"r64 DotV2d(v2d left, v2d right)",
			"r64 DotV3d(v3d left, v3d right)",
			"r64 DotV4d(v4d left, v4d right)",
			"r64 XmlGetAttributeR64(XmlFile* file, XmlElement* element, Str8 attributeName)",
			"r64 XmlGetAttributeR64OrDefault(XmlFile* file, XmlElement* element, Str8 attributeName, r64 defaultValue)",
			"u32 GetLowercaseCodepoint(u32 codepoint)",
			"u32 GetMonospaceCodepointFor(u32 codepoint)",
			"u32 GetRegularCodepointForMonospace(u32 monospaceCodepoint)",
			"u32 GetUppercaseCodepoint(u32 codepoint)",
			"u64 XmlGetAttributeU64(XmlFile* file, XmlElement* element, Str8 attributeName)",
			"u64 XmlGetAttributeU64OrDefault(XmlFile* file, XmlElement* element, Str8 attributeName, u64 defaultValue)",
			"u8 GetCodepointBeforeIndex(const char* strPntr, u64 startIndex, u32* codepointOut)",
			"u8 GetCodepointForUcs2(u64 maxNumWords, const u16* strPntr, u32* codepointOut)",
			"u8 GetCodepointForUtf8(u64 maxNumBytes, const char* strPntr, u32* codepointOut)",
			"u8 GetCodepointForUtf8Str(Str8 str, uxx index, u32* codepointOut)",
			"u8 GetCodepointUtf8Size(u32 codepoint)",
			"u8 GetDefaultFontStyleFlags(const PigFont* font)",
			"u8 GetPrevCodepointForUtf8(u64 numBytesBeforePntr, const char* strEndPntr, u32* codepointOut)",
			"u8 GetPrevCodepointForUtf8Str(Str8 str, uxx index, u32* codepointOut)",
			"u8 GetUcs2WordsForCode(u32 codepoint, u16* wordBufferOut, bool doAssertions)",
			"u8 GetUtf8BytesForCode(u32 codepoint, u8* byteBufferOut, bool doAssertions)",
			"uxx BktArrayGetBucketIndex(BktArray* array, const void* itemPntr, uxx* innerIndexOut)",
			"uxx BktArrayGetBucketIndexAt(BktArray* array, uxx itemIndex, uxx* innerIndexOut)",
			"uxx FindNextCharInStr(Str8 target, uxx startIndex, Str8 searchCharsStr)",
			"uxx FindNextCharInStrEx(Str8 target, uxx startIndex, Str8 searchCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextUnknownCharInStr(Str8 target, uxx startIndex, Str8 knownCharsStr)",
			"uxx FindNextUnknownCharInStrEx(Str8 target, uxx startIndex, Str8 knownCharsStr, bool ignoreCharsInQuotes)",
			"uxx FindNextWhitespaceInStrEx(Str8 target, uxx startIndex, bool ignoreCharsInQuotes)",
			"uxx StrAnyCaseFind(Str8 haystack, Str8 needle)",
			"uxx StrExactFind(Str8 haystack, Str8 needle)",
			"uxx StrFind(Str8 haystack, Str8 needle, bool caseSensitive)",
			"uxx UiTextboxFindClosestIndexToPos(UiTextbox* tbox, v2 screenPos)",
			"v2 ProjectMercator(v2d geoLoc, rec mapRec)",
			"v2d NewV2d(r64 x, r64 y)",
			"v3d NewV3d(r64 x, r64 y, r64 z)",
			"v4d NewV4d(r64 x, r64 y, r64 z, r64 w)",
			"void AddRemapPointer(PointerRemap* remap, const void* fromPntr, const void* toPntr)",
			"void AddRemapRange(PointerRemap* remap, uintptr_t from, uintptr_t to, size_t size, bool combineIfPossible)",
			"void AttachTtfFileToFont(PigFont* font, Slice ttfFileContents)",
			"void BktArrayClear(BktArray* array, bool deallocate)",
			"void BktArrayCondense(BktArray* array)",
			"void BktArrayCondenseInto(BktArray* array, Arena* intoArena, bool freeMemory)",
			"void BktArrayCopy(Arena* arena, BktArray* destArray, const BktArray* srcArray)",
			"void BktArrayDropEmptyBuckets(BktArray* array)",
			"void ClearFontAtlases(PigFont* font)",
			"void DoUiTextbox(UiWidgetContext* context, UiTextbox* tbox, PigFont* font, u8 fontStyle, r32 fontSize, r32 uiScale)",
			"void FillFontKerningTable(PigFont* font)",
			"void FreeBtkArray(BktArray* array)",
			"void FreeFont(PigFont* font)",
			"void FreeFontAtlas(PigFont* font, FontAtlas* atlas)",
			"void FreeFontKerningTable(Arena* arena, FontKerningTable* kerningTable)",
			"void FreeMemAligned(Arena* arena, void* allocPntr, uxx allocSize, uxx alignmentOverride)",
			"void FreeStr8(Arena* arena, Str8* stringPntr)",
			"void FreeStr8WithNt(Arena* arena, Str8* stringPntr)",
			"void FreeUiTextbox(UiTextbox* tbox)",
			"void FreeVarArray(VarArray* array)",
			"void FreeXmlParser(XmlParser* parser)",
			"void InitFontTtfInfo(PigFont* font)",
			"void InitPointerRemap(PointerRemap* remapOut, Arena* arena)",
			"void InitPointerRemapWithInitial(PointerRemap* remapOut, Arena* arena, uxx numRangesExpected)",
			"void InitUiTextbox(Arena* arena, Str8 idStr, Str8 initialText, UiTextbox* tbox)",
			"void InitXmlParser(Arena* arena, Str8 xmlData, bool copyXmlData, u64 numSrlInfos, const SrlInfo* srlInfos, u64 maxStackSize, XmlParser* parserOut)",
			"void OpenOsmMap(Str8 filePath)",
			"void RemoveAttachedTtfFile(PigFont* font)",
			"void UiTextboxDeleteBytes(UiTextbox* tbox, uxx startIndex, uxx numBytes)",
			"void UiTextboxDeleteSelected(UiTextbox* tbox)",
			"void UiTextboxSelectAll(UiTextbox* tbox)",
			"void VarArrayClear(VarArray* array)",
			"void VarArrayClearEx(VarArray* array, bool deallocate)",
			"void VarArrayRemove_(uxx itemSize, uxx itemAlignment, VarArray* array, const void* itemToRemove)",
			"void VarArrayVisit(VarArray* array, ArrayVisitFunc_f* visitFunc)",
			"void* AllocMemAligned(Arena* arena, uxx numBytes, uxx alignmentOverride)",
			"void* ReallocMemAligned(Arena* arena, void* allocPntr, uxx oldSize, uxx oldAlignmentOverride, uxx newSize, uxx newAlignmentOverride)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"Arena",
			"ArrayVisitFunc_f",
			"BktArray",
			"BktArrayBkt",
			"OsDll",
			"OsmNodeRef",
			"PointerRemap",
			"PointerRemapRange",
			"UiTextbox",
			"VarArray",
			"Vec2R64",
			"Vec3R64",
			"Vec4R64",
			"XmlAttribute",
			"XmlElement",
			"XmlFile",
			"mat2",
			"mat3",
			"mat4",
			"v2",
			"v2d",
			"v2i",
			"v3",
			"v3d",
			"v3i",
			"v4",
			"v4d",
			"v4i",
			"v4r",
		],
	},
}
